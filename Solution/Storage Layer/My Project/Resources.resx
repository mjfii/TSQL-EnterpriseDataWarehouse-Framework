<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSA_AsIsSecurityDefinition" xml:space="preserve">
    <value>grant select on [{{{schema}}}].[{{{entity}}}.AsIs] to [psa_abstractreader];
grant select on [{{{schema}}}].[{{{entity}}}.AsIs] to [psa_current_state_reader];</value>
  </data>
  <data name="PSA_AsIsTriggerDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}}.AsIs {Reverse DML}] on [{{{schema}}}].[{{{entity}}}.AsIs]
instead of insert,update,delete
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;
   raiserror(N'DML Statements are not allowed on this AsIs view.  Use the Control Abstraction [{{{schema}}}].[{{{entity}}}.Control] instead.',16,1)
end;</value>
  </data>
  <data name="PSA_AsIsViewDefinition" xml:space="preserve">
    <value>create view [{{{schema}}}].[{{{entity}}}.AsIs] with schemabinding
as
select
   [psa_entity_key] [PersistentEntityKey],
   [psa_entity_sequence] [PersistentEntityIncrement],
   [psa_start_period] [PersistentEntityValidFrom],
   isnull([psa_end_period],'9999-12-31 23:59:59.9999999') [PersistentEntityValidTo],
   [psa_dml_action] [PersistentEntityChangeAction],
{{{columnset}}}
from
   {{{domain}}}
where
   [psa_archive_flag]=0
   and
   [psa_active_state]=1
   and
   [psa_current_flag]=1;</value>
  </data>
  <data name="PSA_AsOfFunctionDefinition" xml:space="preserve">
    <value>create function [{{{schema}}}].[{{{entity}}}.AsOf]
 (
   @AsOfDateTime datetime2(7)
 ) 
returns table with schemabinding
as return

select
   [psa_entity_key] [PersistentEntityKey],
   [psa_entity_sequence] [PersistentEntityIncrement],
   [psa_start_period] [PersistentEntityValidFrom],
   isnull([psa_end_period],'9999-12-31 23:59:59.9999999') [PersistentEntityValidTo],
   [psa_dml_action] [PersistentEntityChangeAction],
{{{columnset}}}
from
   {{{domain}}}
where
   [psa_archive_flag]=0
   and
   [psa_active_state]=1
   and
   [psa_start_period]&lt;=@AsOfDateTime
   and
   isnull([psa_end_period],'9999-12-31 23:59:59.9999999')&gt;=@AsOfDateTime;</value>
  </data>
  <data name="PSA_AsOfSecurityDefinition" xml:space="preserve">
    <value>grant select on [{{{schema}}}].[{{{entity}}}.AsOf] to [psa_abstractreader];</value>
  </data>
  <data name="PSA_AsWasSecurityDefinition" xml:space="preserve">
    <value>grant select on [{{{schema}}}].[{{{entity}}}.AsWas] to [psa_abstractreader];</value>
  </data>
  <data name="PSA_AsWasTriggerDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}}.AsWas {Reverse DML}] on [{{{schema}}}].[{{{entity}}}.AsWas]
instead of insert,update,delete
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;
   raiserror(N'DML Statements are not allowed on this AsWas view.  Use the Control Abstraction [{{{schema}}}].[{{{entity}}}.Control] instead.',16,1)
end;</value>
  </data>
  <data name="PSA_AsWasViewDefinition" xml:space="preserve">
    <value>create view [{{{schema}}}].[{{{entity}}}.AsWas] with schemabinding
as
select
   [psa_entity_key] [PersistentEntityKey],
   [psa_entity_sequence] [PersistentEntityIncrement],
   [psa_start_period] [PersistentEntityValidFrom],
   isnull([psa_end_period],'9999-12-31 23:59:59.9999999') [PersistentEntityValidTo],
   [psa_dml_action] [PersistentEntityChangeAction],
{{{columnset}}}
from
   {{{domain}}}
where
   [psa_archive_flag]=0;</value>
  </data>
  <data name="PSA_BatchCountSecurityDefinition" xml:space="preserve">
    <value>grant select on [{{{schema}}}].[{{{entity}}}.BatchCount] to [psa_etl_manager];</value>
  </data>
  <data name="PSA_BatchCountTriggerDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}}.BatchCount {Reverse DML}] on [{{{schema}}}].[{{{entity}}}.BatchCount]
instead of insert,update,delete
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;
   raiserror(N'DML Statements are not allowed on this aggregated BatchCount view.  Use the Control Abstraction [{{{schema}}}].[{{{entity}}}.Control] instead to remove individual records.',16,1)
end;</value>
  </data>
  <data name="PSA_BatchCountViewDefinition" xml:space="preserve">
    <value>create view [{{{schema}}}].[{{{entity}}}.BatchCount] with schemabinding
as
select
   [psa_batch_id] [BatchUID],
   isnull(sum(case when [psa_dml_action]=N'I' then 1 else 0 end),0) [Inserted],
   isnull(sum(case when [psa_dml_action]=N'U' then 1 else 0 end),0) [Updated],
   isnull(sum(case when [psa_dml_action]=N'D' then 1 else 0 end),0) [Deleted],
   isnull(count([psa_entity_key]),0) [Total]
from
   {{{domain}}}
where
   [psa_batch_id] is not null
group by
   [psa_batch_id];</value>
  </data>
  <data name="PSA_ChangesFunctionDefinition" xml:space="preserve">
    <value>create function [{{{schema}}}].[{{{entity}}}.Changes]
 (
   @Version bigint=0,
   @NullOnDeletes bit=1
 )
returns table with schemabinding
as return

select
   d.[psa_entity_key] [PersistentEntityKey],
   d.[psa_entity_sequence] [PersistentEntityIncrement],
   d.[psa_start_period] [PersistentEntityValidFrom],
   isnull(d.[psa_end_period],'9999-12-31 23:59:59.9999999') [PersistentEntityValidTo],
   d.[psa_dml_action] [PersistentEntityChangeAction],
{{{ak_columnset}}}
{{{columnset}}}
from
   changetable(changes {{{domain}}},@Version) c
   inner join
   {{{domain}}} d  on c.[psa_surrogate_key]=d.[psa_surrogate_key] and d.[psa_current_flag]=1;</value>
  </data>
  <data name="PSA_ChangesSecurityDefinition" xml:space="preserve">
    <value>grant select on [{{{schema}}}].[{{{entity}}}.Changes] to [psa_abstractreader];</value>
  </data>
  <data name="PSA_ChangeTrackingDefinition" xml:space="preserve">
    <value>if not exists(select N'?' from sys.change_tracking_tables where [object_id]=object_id(N'{{{domain}}}')) begin;
   alter table {{{domain}}} enable change_tracking
   with(track_columns_updated=off);
end;

if not exists(select N'?' from sys.stats where [name]=N'st : syscommittab :: commit_ts') begin;
   create statistics [st : syscommittab :: commit_ts] on [edw_psa].[sys].[syscommittab] (commit_ts);
end;

-- drop statistics [sys].[syscommittab].[st : syscommittab :: commit_ts]</value>
  </data>
  <data name="PSA_ControlViewDefinition" xml:space="preserve">
    <value>create view [{{{schema}}}].[{{{entity}}}.Control] with schemabinding
as
select
{{{columnset}}}
from
   {{{domain}}}
where
   [psa_current_flag]=1;</value>
  </data>
  <data name="SYS_DatabaseProperties" xml:space="preserve">
    <value>select
   db_name() [database_name],
   [compatibility_level]
from 
   sys.databases 
where 
   [database_id]=db_id();</value>
  </data>
  <data name="PSA_DropRelatedObjects" xml:space="preserve">
    <value>-- service broker drops
if exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Processing') drop service [//{{{schema}}}/{{{entity}}}/Upsert/Service/Processing];
if exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Request') drop service [//{{{schema}}}/{{{entity}}}/Upsert/Service/Request];
if exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Processing') drop service [//{{{schema}}}/{{{entity}}}/Delete/Service/Processing];
if exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Request') drop service [//{{{schema}}}/{{{entity}}}/Delete/Service/Request];
if object_id(N'[{{{schema}}}].[{{{entity}}}.RequestUpsert]',N'SQ') is not null drop queue [{{{schema}}}].[{{{entity}}}.RequestUpsert];
if object_id(N'[{{{schema}}}].[{{{entity}}}.ProcessingUpsert]',N'SQ') is not null drop queue [{{{schema}}}].[{{{entity}}}.ProcessingUpsert];
if object_id(N'[{{{schema}}}].[{{{entity}}}.RequestDelete]',N'SQ') is not null drop queue [{{{schema}}}].[{{{entity}}}.RequestDelete];
if object_id(N'[{{{schema}}}].[{{{entity}}}.ProcessingDelete]',N'SQ') is not null drop queue [{{{schema}}}].[{{{entity}}}.ProcessingDelete];
if exists(select 1 from sys.service_contracts where [name]='//{{{schema}}}/{{{entity}}}/Contract') drop contract [//{{{schema}}}/{{{entity}}}/Contract];
if exists(select 1 from sys.service_message_types where [name]='//{{{schema}}}/{{{entity}}}/Message/Request') drop message type [//{{{schema}}}/{{{entity}}}/Message/Request];
if exists(select 1 from sys.service_message_types where [name]='//{{{schema}}}/{{{entity}}}/Message/Result') drop message type [//{{{schema}}}/{{{entity}}}/Message/Result];

-- abstacts and methods
if object_id('[{{{schema}}}].[{{{entity}}}.AsOf]',N'IF') is not null drop function [{{{schema}}}].[{{{entity}}}.AsOf];
if object_id('[{{{schema}}}].[{{{entity}}}.Changes]',N'IF') is not null drop function [{{{schema}}}].[{{{entity}}}.Changes];

if object_id('[{{{schema}}}].[{{{entity}}}.ProcessUpsert]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.ProcessUpsert];
if object_id('[{{{schema}}}].[{{{entity}}}.WorkerUpsert]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.WorkerUpsert];
if object_id('[{{{schema}}}].[{{{entity}}}.ProcessDelete]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.ProcessDelete];
if object_id('[{{{schema}}}].[{{{entity}}}.WorkerDelete]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.WorkerDelete];

if object_id('[{{{schema}}}].[{{{entity}}}.ProcessArchive]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.ProcessArchive];
if object_id('[{{{schema}}}].[{{{entity}}}.RehashEntity]',N'P') is not null drop procedure [{{{schema}}}].[{{{entity}}}.RehashEntity];

if object_id('[{{{schema}}}].[{{{entity}}}.AsIs]',N'V') is not null drop view [{{{schema}}}].[{{{entity}}}.AsIs];
if object_id('[{{{schema}}}].[{{{entity}}}.AsWas]',N'V') is not null drop view [{{{schema}}}].[{{{entity}}}.AsWas];
if object_id('[{{{schema}}}].[{{{entity}}}.Control]',N'V') is not null drop view [{{{schema}}}].[{{{entity}}}.Control];
if object_id('[{{{schema}}}].[{{{entity}}}.Archive]',N'V') is not null drop view [{{{schema}}}].[{{{entity}}}.Archive];
if object_id('[{{{schema}}}].[{{{entity}}}.BatchCount]',N'V') is not null drop view [{{{schema}}}].[{{{entity}}}.BatchCount];

if object_id('[{{{schema}}}].[{{{entity}}}.DeleteStage]',N'U') is not null drop table [{{{schema}}}].[{{{entity}}}.DeleteStage];
if object_id('[{{{schema}}}].[{{{entity}}}.UpsertStage]',N'U') is not null drop table [{{{schema}}}].[{{{entity}}}.UpsertStage];
if object_id('[{{{schema}}}].[{{{entity}}}.ArchiveStage]',N'U') is not null drop table [{{{schema}}}].[{{{entity}}}.ArchiveStage];</value>
  </data>
  <data name="PSA_DropTemporalGovernorDefinition" xml:space="preserve">
    <value>if object_id(N'[{{{schema}}}].[tr : {{{label}}} {Temporal Governor}]',N'TR') is not null begin;
   drop trigger [{{{schema}}}].[tr : {{{label}}} {Temporal Governor}];
end;</value>
  </data>
  <data name="SYS_InstanceProperties" xml:space="preserve">
    <value>select
   db_name() [database_name],
   @@servername [instance_name],
   serverproperty('productlevel') [product_level],
   serverproperty('edition') [edition],
   parsename(convert(nvarchar(50),serverproperty('productversion')),4) [version];</value>
  </data>
  <data name="SYS_QueryBehavior" xml:space="preserve">
    <value>set nocount on;
set quoted_identifier on;
set ansi_nulls on;
set ansi_warnings on;</value>
  </data>
  <data name="PSA_RenameDefinition" xml:space="preserve">
    <value>if object_id(N'{{{domain}}}',N'U') is not null begin;

   -- any existing change control
   delete [dbo].[psa_change_tracking_entity_version] where [psa_object_id]=object_id('{{{domain}}}',N'U');

   exec [sys].[sp_rename] N'{{{domain}}}', N'{{{label}}}.{{{ext}}}';
   alter schema [dbo] transfer [{{{schema}}}].[{{{label}}}.{{{ext}}}];

   declare @x int;

   select
      @x=[rows]
   from
      sys.partitions
   where
      [object_id]=object_id(N'[dbo].[{{{label}}}.{{{ext}}}]',N'U')
      and
      [partition_number]=1;

   if @x=0 begin;
      drop table [dbo].[{{{label}}}.{{{ext}}}];
   end else begin;

      exec [sys].[sp_rename] N'[dbo].[pk : {{{label}}} {Surrogate Primary Key}]',N'pk : {{{label}}} {Surrogate Primary Key} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[ak : {{{label}}} {Source Natural Key}]',N'pk : {{{label}}} {Source Natural Key} {{{ext}}}';

      exec [sys].[sp_rename] N'[dbo].[ck : {{{label}}} {Postive Incrementation}]',N'pk : {{{label}}} {Postive Incrementation} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[ck : {{{label}}} {Temporal Sequence On Current Period}]',N'pk : {{{label}}} {Temporal Sequence On Current Period} {{{ext}}}';

      exec [sys].[sp_rename] N'[dbo].[df : {{{label}}} {Archive Record Flag}]',N'pk : {{{label}}} {Archive Record Flag} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[df : {{{label}}} {Change Incrementation Sequence Number}]',N'pk : {{{label}}} {Change Incrementation Sequence Number} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[df : {{{label}}} {New Record State}]',N'pk : {{{label}}} {New Record State} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[df : {{{label}}} {Parent SPK Sequence Number}]',N'pk : {{{label}}} {Parent SPK Sequence Number} {{{ext}}}';
      exec [sys].[sp_rename] N'[dbo].[df : {{{label}}} {SPK Sequence Number}]',N'pk : {{{label}}} {SPK Sequence Number} {{{ext}}}';

      drop trigger [dbo].[tr : {{{label}}} {Temporal Governor}]

   end;

end;</value>
  </data>
  <data name="PSA_RoleDefinitions" xml:space="preserve">
    <value>if not exists(select 1 from sys.sysusers where [name]=N'psa_owner') begin;
   create role [psa_owner] authorization [db_owner];
end;

if not exists(select 1 from sys.sysusers where [name]=N'psa_abstractreader') begin;
   create role [psa_abstractreader] authorization [psa_owner];
end;

if not exists(select 1 from sys.sysusers where [name]=N'psa_etl_manager') begin;
   create role [psa_etl_manager] authorization [psa_owner];
end;

if not exists(select 1 from sys.sysusers where [name]=N'psa_current_state_reader') begin;
   create role [psa_current_state_reader] authorization [psa_owner];
end;</value>
  </data>
  <data name="PSA_SchemaDefinition" xml:space="preserve">
    <value>set nocount on;
set quoted_identifier on;
set ansi_nulls on;
set ansi_warnings on;

if not exists (select * from sys.sysusers where [name]='psa_owner') begin;
   create role [psa_owner] authorization [db_owner];
end;

if not exists (select * from sys.sysusers where [name]='psa_etl_manager') begin;
   create role [psa_etl_manager] authorization [psa_owner];
end;

if not exists (select * from sys.sysusers where [name]='psa_abstractreader') begin;
   create role [psa_abstractreader] authorization [psa_owner];
end;

if not exists (select 1 from sys.schemas where [name]=N'{{{schema}}}') begin;
   exec sys.sp_executesql N'create schema [{{{schema}}}] authorization [psa_owner];'
end;</value>
  </data>
  <data name="PSA_SequenceDefinition" xml:space="preserve">
    <value>if not exists (select * from sys.sequences where [name]=N'{{{entity}}}.SPK' and object_schema_name([object_id])=N'{{{schema}}}') begin;
   exec sys.sp_executesql N'create sequence [{{{schema}}}].[{{{entity}}}.SPK] start with 1 increment by 1 minvalue 1 cycle cache 1000;'
end;</value>
  </data>
  <data name="PSA_TableDefinition" xml:space="preserve">
    <value>set nocount on;
set quoted_identifier on;
set ansi_nulls on;
set ansi_warnings on;

create table {{{domain}}}
 (
   [psa_surrogate_key] bigint not null
   constraint [df : {{{label}}} {SPK Sequence Number}]
   default (next value for [{{{schema}}}].[{{{entity}}}.SPK]),

   constraint [pk : {{{label}}} {Surrogate Primary Key}]
   primary key nonclustered ([psa_surrogate_key])
   with (data_compression=page,fillfactor=95) on [SPK],

   [psa_entity_key] bigint not null
   constraint [df : {{{label}}} {Parent SPK Sequence Number}]
   default (next value for [{{{schema}}}].[{{{entity}}}.SPK]),

   -- BEGIN business identifier from source

{{{bichunk}}}
   -- END business identifier from source

   [psa_entity_sequence] smallint not null
   constraint [df : {{{label}}} {Change Incrementation Sequence Number}]
   default (1)
   constraint [ck : {{{label}}} {Postive Incrementation}]
   check ([psa_entity_sequence] between 1 and 32767),

   constraint [ak : {{{label}}} {Source Natural Key}]
   unique clustered {{{akchunk}}}
   with (data_compression=page,fillfactor=80) on [SNK],
   
   [psa_start_period] datetime2(7) not null,
   [psa_end_period] datetime2(7) null,
   constraint [ck : {{{label}}} {Temporal Sequence On Current Period}]
   check ([psa_start_period]&lt;[psa_end_period]),

   [psa_active_state] bit not null
   constraint [df : {{{label}}} {New Record State}]
   default (1),

   [psa_dml_action] as case when [psa_active_state]=0 then N'D' when [psa_entity_sequence]=1 then N'I' else N'U' end persisted not null,
   [psa_current_flag] as convert(bit,case when [psa_end_period] is null then 1 else 0 end) persisted not null,

   [psa_archive_flag] bit not null
   constraint [df : {{{label}}} {Archive Record Flag}]
   default (0),

   [psa_batch_id]	uniqueidentifier null,
   [psa_hash_id] varbinary(20) not null,

   -- BEGIN attributes from source

{{{attrchunk}}}
   -- END attributes from source
 );

create statistics [st : {{{label}}} :: psa_entity_sequence] on {{{domain}}}
 (
   [psa_entity_sequence]
 );

create statistics [st : {{{label}}} :: psa_start_period] on {{{domain}}}
 (
   [psa_start_period]
 );

create statistics [st : {{{label}}} :: psa_end_period] on {{{domain}}}
 (
   [psa_end_period]
 );

create statistics [st : {{{label}}} :: psa_active_state] on {{{domain}}}
 (
   [psa_active_state]
 );

create statistics [st : {{{label}}} :: psa_dml_action] on {{{domain}}}
 (
   [psa_dml_action]
 );

create statistics [st : {{{label}}} :: psa_current_flag] on {{{domain}}}
 (
   [psa_current_flag]
 );

create statistics [st : {{{label}}} :: psa_archive_flag] on {{{domain}}}
 (
   [psa_archive_flag]
 );

create statistics [st : {{{label}}} :: psa_batch_id] on {{{domain}}}
 (
   [psa_batch_id]
 );

create statistics [st : {{{label}}} :: psa_hash_id] on {{{domain}}}
 (
   [psa_hash_id]
 );

create nonclustered index [ie : {{{label}}} :: psa_start_period :: psa_end_period] on {{{domain}}}
 (
   [psa_start_period] desc,
   [psa_end_period] desc
 ) with (fillfactor=80,data_compression=page);

create nonclustered index [ie : {{{label}}} :: {Record State}] on {{{domain}}}
 (
   [psa_entity_key] asc,
   [psa_current_flag] desc,
   [psa_active_state] desc,
   [psa_archive_flag] desc
 ) with (fillfactor=80,data_compression=page);</value>
  </data>
  <data name="PSA_TemporalGovernorDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}} {Temporal Governor}] on {{{domain}}}
after update
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;

   set nocount on;

   insert {{{domain}}}
    (
      [psa_entity_key],
      [psa_entity_sequence],
      [psa_start_period],
      [psa_end_period],
      [psa_active_state],
      [psa_batch_id],
      [psa_archive_flag],
{{{insertset}}}
      [psa_hash_id]
    )
   select
      d.[psa_entity_key],
      d.[psa_entity_sequence],
      d.[psa_start_period],
      dateadd(nanosecond,-100,i.[psa_start_period]), -- contiguous time period from prior record
      d.[psa_active_state],
      d.[psa_batch_id],
      d.[psa_archive_flag],
{{{selectset}}}
      d.[psa_hash_id]
   from
      [deleted] d
      inner join
      [inserted] i on d.[psa_surrogate_key]=i.[psa_surrogate_key];

end;</value>
  </data>
  <data name="PSA_HashingAlgorithm" xml:space="preserve">
    <value>if object_id(N'[dbo].[psa_hash]',N'FS') is not null drop function [dbo].[psa_hash];

exec sys.sp_executesql
N'
create function [dbo].[psa_hash] 
 (
   @string nvarchar(max)
 ) 
returns varbinary(20) with execute as owner
as external name [Slalom.Framework.Methods].[EDW.Common.Methods].[StringHash];'

exec sys.sp_MS_marksystemobject 'psa_hash';

grant execute on [dbo].[psa_hash] to [psa_etl_manager];
grant execute on [dbo].[psa_hash] to [psa_owner];</value>
  </data>
  <data name="SYS_TableMetadataDefinition" xml:space="preserve">
    <value>if object_id('[dbo].[sp_manage_table_properties]',N'P') is not null drop procedure [dbo].[sp_manage_table_properties];

exec sys.sp_executesql
N'
create procedure [dbo].[sp_manage_table_properties]
 (
   @domain_name sysname,
   @property sysname,
   @property_value sql_variant
 ) with encryption
as

set nocount on;

declare
   @object_id int;

select
   @object_id=object_id(@domain_name);

if @object_id is null begin;
   print N''Domain ''+isnull(@domain_name,N''{NULL}'')+N'' does not exist.  Property was not added.''
   return 1;
end;

declare
   @object_schema sysname,
   @object_name sysname;

select
   @object_schema=object_schema_name(@object_id),
   @object_name=object_name(@object_id);

if exists(select 1 from sys.extended_properties  where [major_id]=@object_id and [class]=1 and [minor_id]=0 and [name]=@property) begin;
   exec sys.sp_updateextendedproperty
      @name=@property,
      @value=@property_value,

      @level0type=N''SCHEMA'',
      @level0name=@object_schema,
   
      @level1type=N''TABLE'',
      @level1name=@object_name;
end else begin;
   exec sys.sp_addextendedproperty
      @name=@property,
      @value=@property_value,

      @level0type=N''SCHEMA'',
      @level0name=@object_schema,
   
      @level1type=N''TABLE'',
      @level1name=@object_name;
end;
return 0;
';

exec sys.sp_MS_marksystemobject 'sp_manage_table_properties';</value>
  </data>
  <data name="SYS_TablePropertyDefintion" xml:space="preserve">
    <value>exec [dbo].[sp_manage_table_properties] N'{{{domain}}}',N'{{{property}}}',N'{{{value}}}';</value>
  </data>
  <data name="SYS_ColumnMetadataDefinition" xml:space="preserve">
    <value>if object_id('[dbo].[sp_manage_column_properties]',N'P') is not null drop procedure [dbo].[sp_manage_column_properties];

exec sys.sp_executesql
N'
create procedure [dbo].[sp_manage_column_properties]
 (
   @domain_name sysname,
   @column_name sysname,
   @property sysname,
   @property_value sql_variant
 ) with encryption
as

set nocount on;

declare
   @object_id int,
   @column_id int;

select
   @object_id=object_id(@domain_name);

if @object_id is null begin;
   print N''Domain ''+isnull(@domain_name,N''{NULL}'')+N'' does not exist.  Property was not added.''
   return 1;
end;

declare
   @object_schema sysname,
   @object_name sysname;

select
   @object_schema=object_schema_name(@object_id),
   @object_name=object_name(@object_id);

select 
   @column_id=[column_id] 
from 
   sys.columns 
where 
   [object_id]=@object_id 
   and 
   [name]=@column_name;

if @column_id is null begin;
   print N''Attribute ''+isnull(@column_name,N''{NULL}'')+N'' does not exist.  Property was not added.''
   return 1;
end;

if exists(select 1 from sys.extended_properties  where [major_id]=@object_id and [class]=1 and [minor_id]=@column_id and [name]=@property) begin;
   exec sys.sp_updateextendedproperty
      @name=@property,
      @value=@property_value,

      @level0type=N''SCHEMA'',
      @level0name=@object_schema,
   
      @level1type=N''TABLE'',
      @level1name=@object_name,

      @level2type=N''COLUMN'',
      @level2name=@column_name;

end else begin;
   exec sys.sp_addextendedproperty
      @name=@property,
      @value=@property_value,

      @level0type=N''SCHEMA'',
      @level0name=@object_schema,
   
      @level1type=N''TABLE'',
      @level1name=@object_name,

      @level2type=N''COLUMN'',
      @level2name=@column_name;
end;

return 0;
';

exec sys.sp_MS_marksystemobject 'sp_manage_column_properties';</value>
  </data>
  <data name="PSA_ChangeTrackingSystemDefinition" xml:space="preserve">
    <value>set nocount on;
set quoted_identifier on;
set ansi_nulls on;

exec sys.sp_executesql 
N'
if object_id(N''[dbo].[psa_change_tracking_entity_version]'',N''U'') is null begin;

create table [dbo].[psa_change_tracking_entity_version]
 (
   [psa_object_id] int not null,
   [psa_activity] nvarchar(10) not null,
   constraint [pk : dbo.psa_change_tracking_entity_version] 
   primary key clustered ([psa_activity],[psa_object_id]),

   [psa_schema] sysname not null,
   [psa_entity] sysname not null,
   [psa_domain] as quotename([psa_schema])+N''.''+quotename([psa_entity]) persisted,

   [psa_change_tracking_get] bigint,
   [psa_change_tracking_set] bigint
 );

create statistics [st : dbo.psa_change_tracking_entity_version :: psa_object_id] on [dbo].[psa_change_tracking_entity_version]
 (
   [psa_object_id]
 );

create statistics [st : dbo.psa_change_tracking_entity_version :: psa_schema] on [dbo].[psa_change_tracking_entity_version]
 (
   [psa_schema]
 );

create statistics [st : dbo.psa_change_tracking_entity_version :: psa_entity] on [dbo].[psa_change_tracking_entity_version]
 (
   [psa_entity]
 );

create statistics [st : dbo.psa_change_tracking_entity_version :: psa_domain] on [dbo].[psa_change_tracking_entity_version]
 (
   [psa_domain]
 );

create statistics [st : dbo.psa_change_tracking_entity_version :: psa_activity] on [dbo].[psa_change_tracking_entity_version]
 (
   [psa_activity]
 );

exec sys.sp_MS_marksystemobject N''psa_change_tracking_entity_version'';
end;
';

exec sys.sp_executesql 
N'
if object_id(N''[dbo].[psa_get_change_tracking_entity_version]'',N''P'') is not null drop procedure [dbo].[psa_get_change_tracking_entity_version];
';

exec sys.sp_executesql 
N'
create procedure [dbo].[psa_get_change_tracking_entity_version] 
 (
   @entity sysname,
   @activity nvarchar(10),
   @current_version bigint output
 ) with execute as ''dbo''
as
set nocount on;

declare
   @oid int=null;

select
   @oid=[object_id]
from
   sys.change_tracking_tables ctt
where
   [object_id]=object_id(@entity);

if @oid is null begin;
   raiserror(''PSA entity %s does not exist and cannot be accessed for change tracking versioning.'',16,1,@entity) with log;
   return -1;
end;

with merge_source as
 (
   select
      @oid [psa_object_id],
      @activity [psa_activity],
      change_tracking_current_version() [psa_change_tracking_set],
      change_tracking_min_valid_version(@oid) [psa_change_tracking_get],
      object_schema_name(@oid) [psa_schema],
      object_name(@oid) [psa_entity]
 )
merge
   [dbo].[psa_change_tracking_entity_version] t
using
   merge_source s on t.[psa_object_id]=s.[psa_object_id]
                 and t.[psa_activity]=s.[psa_activity]
when matched then
   update
      -- [dbo].[psa_change_tracking_entity_version]
   set
      [psa_change_tracking_set]=s.[psa_change_tracking_set]
when not matched by target then
   insert -- [dbo].[psa_change_tracking_entity_version]
    (
      [psa_object_id],
      [psa_activity],
      [psa_schema],
      [psa_entity],
      [psa_change_tracking_get],
      [psa_change_tracking_set]
    )
   values
    (
      s.[psa_object_id],
      s.[psa_activity],
      s.[psa_schema],
      s.[psa_entity],
      s.[psa_change_tracking_get],
      s.[psa_change_tracking_set]
    );

declare
   @rv bigint;

select
   @rv=[psa_change_tracking_get]
from
   [dbo].[psa_change_tracking_entity_version]
where
   [psa_object_id]=@oid
   and
   [psa_activity]=@activity;

select
   @current_version=@rv;

return @rv;
';

exec sys.sp_executesql 
N'
exec sys.sp_MS_marksystemobject N''psa_get_change_tracking_entity_version'';
';

exec sys.sp_executesql 
N'
if object_id(N''[dbo].[psa_set_change_tracking_entity_version]'',N''P'') is not null drop procedure [dbo].[psa_set_change_tracking_entity_version];
';

exec sys.sp_executesql 
N'
create procedure [dbo].[psa_set_change_tracking_entity_version]
 (
   @entity sysname,
   @activity nvarchar(10)
 ) with execute as ''dbo''
as
set nocount on;

declare
   @oid int=null;

select
   @oid=[object_id]
from
   sys.change_tracking_tables ctt
where
   [object_id]=object_id(@entity);

if @oid is null begin;
   raiserror(''PSA entity %s does not exist and cannot be accessed for change tracking versioning.'',16,1,@entity) with log;
   return -1;
end;

with merge_source as
 (
   select
      @oid [psa_object_id],
      @activity [psa_activity],
      change_tracking_min_valid_version(@oid) [psa_change_tracking_get],
      object_schema_name(@oid) [psa_schema],
      object_name(@oid) [psa_entity]
 )
merge
   [dbo].[psa_change_tracking_entity_version] t
using
   merge_source s on t.[psa_object_id]=s.[psa_object_id]
                 and t.[psa_activity]=s.[psa_activity]
when matched then
   update
      -- [dbo].[psa_change_tracking_entity_version]
   set
      [psa_change_tracking_get]=t.[psa_change_tracking_set]
when not matched by target then
   insert -- [dbo].[psa_change_tracking_entity_version]
    (
      [psa_object_id],
      [psa_activity],
      [psa_schema],
      [psa_entity],
      [psa_change_tracking_get],
      [psa_change_tracking_set]
    )
   values
    (
      s.[psa_object_id],
      s.[psa_activity],
      s.[psa_schema],
      s.[psa_entity],
      s.[psa_change_tracking_get],
      s.[psa_change_tracking_get]
    );

return @@error;
';

exec sys.sp_executesql 
N'
exec sys.sp_MS_marksystemobject N''psa_set_change_tracking_entity_version'';
';

grant select,insert,update,delete on [dbo].[psa_change_tracking_entity_version] to [psa_owner];
grant execute on [dbo].[psa_get_change_tracking_entity_version] to [psa_owner];
grant execute on [dbo].[psa_set_change_tracking_entity_version] to [psa_owner];

grant select,insert,update,delete on [dbo].[psa_change_tracking_entity_version] to [psa_abstractreader];
grant execute on [dbo].[psa_get_change_tracking_entity_version] to [psa_abstractreader];
grant execute on [dbo].[psa_set_change_tracking_entity_version] to [psa_abstractreader];</value>
  </data>
  <data name="PSA_ControlInsertDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}} {Control Insert}] on [{{{schema}}}].[{{{entity}}}.Control]
instead of insert
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;

   set nocount on;

   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=convert(uniqueidentifier,context_info());

   insert {{{domain}}}
    (
{{{columnset}}}
      [psa_batch_id],
      [psa_hash_id],
      [psa_start_period]
    )
   select
{{{columnset}}}
      @batch,
      {{{hashfunction}}}({{{hashext}}}(select {{{hashset}}} for xml raw, binary base64)),
      @ts
   from
      [inserted] i;

end;</value>
  </data>
  <data name="PSA_ControlUpdateDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}} {Control Update}] on [{{{schema}}}].[{{{entity}}}.Control]
instead of update
as
-- do not alter/add/extend this trigger, or any psa trigger
-- authored by slalom consulting 2014
begin;

   set nocount on;

   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=convert(uniqueidentifier,context_info());

{{{updatekeyset}}}
   with [update_source] as
    (
      select
{{{columnset}}}
         @batch [psa_batch_id],
         {{{hashfunction}}}({{{hashext}}}(select {{{hashset}}} for xml raw, binary base64)) [psa_hash_id]
      from
         [inserted] i
    )
   update
      {{{domain}}}
   set
{{{updateset}}}
      [psa_entity_sequence]=t.[psa_entity_sequence]+1,
      [psa_active_state]=1,
      [psa_start_period]=@ts,
      [psa_batch_id]=s.[psa_batch_id],
      [psa_hash_id]=s.[psa_hash_id],
      [psa_archive_flag]=0
   from
      [update_source] s
      inner join
      {{{domain}}} t on s.[psa_hash_id]!=t.[psa_hash_id] and
{{{joinset}}}                         

end;</value>
  </data>
  <data name="SYS_ColumnPropertyDefinition" xml:space="preserve">
    <value>exec [dbo].[sp_manage_column_properties] N'{{{domain}}}',N'{{{attribute}}}',N'{{{property}}}',N'{{{value}}}';</value>
  </data>
  <data name="PSA_ControlDeleteDefinition" xml:space="preserve">
    <value>create trigger [tr : {{{label}}} {Control Delete}] on [{{{schema}}}].[{{{entity}}}.Control]
instead of delete
as
-- do not alter/add/extend this trigger, or any psa trigger
-- framework authored by slalom consulting 2014
begin;

   set nocount on;

   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=convert(uniqueidentifier,context_info());

   with [delete_source] as
    (
      select
{{{columnset}}}
         @batch [psa_batch_id]
      from
         [deleted] i
    )
   update
      {{{domain}}}
   set
      [psa_entity_sequence]=t.[psa_entity_sequence]+1,
      [psa_active_state]=0,
      [psa_start_period]=@ts,
      [psa_batch_id]=s.[psa_batch_id],
      [psa_hash_id]=0x
   from
      [delete_source] s
      inner join
      {{{domain}}} t on t.[psa_active_state]=1 and
{{{joinset}}}           

end;</value>
  </data>
  <data name="SYS_PSAAttributeDefinition" xml:space="preserve">
    <value>select * from [master].[dbo].[psa_attribute_definition] where 1=1</value>
  </data>
  <data name="SYS_PSAEntityDefinition" xml:space="preserve">
    <value>set nocount on;

with [x] as
 (
   select
      [psa_schema],
      [psa_entity],
      row_number() over (partition by [psa_schema],[psa_entity] order by [psa_attribute_ordinal],[psa_attribute]) [ord],
      convert(nvarchar(max),
      right(convert(nvarchar(42),hashbytes(N'sha1',[psa_attribute]),1),40)+N' : '+
      right(convert(nvarchar(42),hashbytes(N'sha1',[psa_attribute_datatype]),1),40)+N' : '+
      right(convert(nvarchar(42),hashbytes(N'sha1',convert(nvarchar(10),[psa_attribute_ordinal])),1),40)+N' : '+
      right(convert(nvarchar(42),hashbytes(N'sha1',[psa_attribute_sort]),1),40)+N' : '+
      right(convert(nvarchar(42),hashbytes(N'sha1',[psa_attribute_optional]),1),40)+N' : '+
      right(convert(nvarchar(42),hashbytes(N'sha1',[psa_attribute_business_id]),1),40)) [sig]
   from
      [master].[dbo].[psa_attribute_definition]
 ), [sel] as
 (
   select
      e.[psa_schema],
      e.[psa_entity],
      e.[psa_entity_description],
      e.[source_schema],
      e.[source_entity],
      e.[psa_hash_large_objects],
      e.[psa_max_threads],
      e.[etl_build_group],
      e.[etl_max_record_count],
      e.[etl_sequence_order],
      e.[etl_infer_deletions],
      e.[etl_full_load],
      e.[etl_source_variables],
      e.[etl_fixed_predicate],
      e.[etl_variable_predicate],
      right(convert(nvarchar(42),[dbo].[psa_hash](e.[psa_hash_large_objects]),1),40)+N' : '+
      right(convert(nvarchar(42),[dbo].[psa_hash](e.[psa_max_threads]),1),40) [logic_sig],
      rtrim(ca.ah) [construct_sig]
   from
      [master].dbo.[psa_entity_definition] e
      cross apply
       (
         select
            convert(nvarchar(max),N'['+[sig]+N'] ')
         from
            [x]
         where
            e.[psa_schema]=x.[psa_schema]
            and
            e.[psa_entity]=x.[psa_entity]
         order by
            [ord]
         for xml path('')
       ) ca(ah)
 )
select
   [psa_schema],
   [psa_entity],
   [psa_entity_description],
   [source_schema],
   [source_entity],
   [psa_hash_large_objects],
   [psa_max_threads],
   [etl_build_group],
   [etl_max_record_count],
   [etl_sequence_order],
   [etl_infer_deletions],
   [etl_full_load],
   [etl_source_variables],
   [etl_fixed_predicate],
   [etl_variable_predicate],
   isnull(right(convert(nvarchar(42),[dbo].[psa_hash]([logic_sig]),1),40),N'') [psa_logical_signature],
   isnull(right(convert(nvarchar(42),[dbo].[psa_hash]([construct_sig]),1),40),N'')  [psa_construct_signature]
from
   [sel]
where
   1=1</value>
  </data>
  <data name="PSA_LogicalSignatureLookup" xml:space="preserve">
    <value>select
   convert(nvarchar(40),[value]) [sig]
from
   sys.extended_properties
where
   [minor_id]=0
   and
   [Name]=N'Logical Signature'
   and
   object_name([major_id])='{{{entity}}}'
   and
   object_schema_name([major_id])='{{{schema}}}';</value>
  </data>
  <data name="PSA_ConstructSignatureLookup" xml:space="preserve">
    <value>select
   convert(nvarchar(40),[value]) [sig]
from
   sys.extended_properties
where
   [minor_id]=0
   and
   [Name]=N'Construct Signature'
   and
   object_name([major_id])='{{{entity}}}'
   and
   object_schema_name([major_id])='{{{schema}}}';</value>
  </data>
  <data name="SYS_SlalomTextArt1" xml:space="preserve">
    <value>   ______     __             _____                  ____  _          
  / __/ /__ _/ /__  __ _    / ___/__  ___  _____ __/ / /_(_)__  ___ _
 _\ \/ / _ `/ / _ \/  ' \  / /__/ _ \/ _ \(_-&lt; // / / __/ / _ \/ _ `/
/___/_/\_,_/_/\___/_/_/_/  \___/\___/_//_/___|_,_/_/\__/_/_//_/\_, / 
                                                              /___/</value>
  </data>
  <data name="PSA_DatabaseTemplate" xml:space="preserve">
    <value>--:SETVAR DatabaseName '[edw_psa]'
--:SETVAR Path 'A:\SQL\Data\'

use [master];
go

create database [edw_psa]
on primary (NAME = N'psa_primary',FILENAME=N'A:\SQL\Data\psa_primary.mdf',SIZE=5120KB,MAXSIZE=UNLIMITED,FILEGROWTH=1024KB), 
filegroup [SNK] (NAME = N'psa_snk', FILENAME=N'A:\SQL\Data\psa_snk.ndf',SIZE=5120KB,MAXSIZE=UNLIMITED,FILEGROWTH=1024KB),
filegroup [SPK]
 (
   NAME = N'psa_spk', FILENAME = N'A:\SQL\Data\psa_spk.ndf' , SIZE = 5120KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB ), 
 filegroup [TMP]
( NAME = N'psa&#x1F;_tmp', FILENAME = N'A:\SQL\Data\psa_tmp.ndf' , SIZE = 5120KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON
( NAME = N'psa_log', FILENAME = N'A:\SQL\Log\psa_log.ldf' , SIZE = 5120KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)

go


ALTER DATABASE [edw_psa] SET COMPATIBILITY_LEVEL = 110
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [edw_psa].[dbo].[sp_fulltext_database] @action = 'disable'
end
GO

ALTER DATABASE [edw_psa] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [edw_psa] SET ANSI_NULLS ON 
GO

ALTER DATABASE [edw_psa] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [edw_psa] SET ANSI_WARNINGS ON 
GO

ALTER DATABASE [edw_psa] SET ARITHABORT OFF 
GO

ALTER DATABASE [edw_psa] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [edw_psa] SET AUTO_CREATE_STATISTICS ON 
GO

ALTER DATABASE [edw_psa] SET AUTO_SHRINK OFF
GO

ALTER DATABASE [edw_psa] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [edw_psa] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [edw_psa] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [edw_psa] SET CONCAT_NULL_YIELDS_NULL OFF
GO

ALTER DATABASE [edw_psa] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [edw_psa] SET QUOTED_IDENTIFIER ON
GO

ALTER DATABASE [edw_psa] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [edw_psa] SET  ENABLE_BROKER 
GO

ALTER DATABASE [edw_psa] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [edw_psa] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [edw_psa] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [edw_psa] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [edw_psa] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [edw_psa] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [edw_psa] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [edw_psa] SET RECOVERY FULL 
GO

ALTER DATABASE [edw_psa] SET  MULTI_USER 
GO

ALTER DATABASE [edw_psa] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [edw_psa] SET DB_CHAINING OFF 
GO

ALTER DATABASE [edw_psa] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [edw_psa] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO

ALTER DATABASE [edw_psa] SET  READ_WRITE 
GO</value>
  </data>
  <data name="PSA_ControlSecurityDefinition" xml:space="preserve">
    <value>grant select,insert,update,delete on [{{{schema}}}].[{{{entity}}}.Control] to [psa_etl_manager];</value>
  </data>
  <data name="PSA_DatabaseChangeTrackingDefinition" xml:space="preserve">
    <value>if not exists(select 1 from sys.change_tracking_databases where [database_id]=db_id()) begin;
   alter database [{{{db}}}] set change_tracking=on (change_retention=5 days,auto_cleanup=on);
end;</value>
  </data>
  <data name="PSA_LoadStageDefinition" xml:space="preserve">
    <value>-- create 'upsert stage' abstraction
if object_id(N'[{{{schema}}}].[{{{entity}}}.UpsertStage]',N'U') is not null drop table [{{{schema}}}].[{{{entity}}}.UpsertStage];
   
create table [{{{schema}}}].[{{{entity}}}.UpsertStage]
 (
   [psa_stage_key] int identity (1,1),
   constraint [pk : {{{schema}}}.{{{entity}}}.UpsertStage {PSA Surrogate Key}]
   primary key clustered ([psa_stage_key])
   with (data_compression=page,fillfactor=95) on [TMP],

{{{bichunk}}}
{{{attrchunk}}}

   constraint [ak : {{{schema}}}.{{{entity}}}.UpsertStage {Source Natural Key}]
   unique nonclustered {{{akchunk}}}
   with (data_compression=page,fillfactor=80) on [TMP]
 );

grant alter,select,insert,update,delete on [{{{schema}}}].[{{{entity}}}.UpsertStage] to [psa_etl_manager];

-- create 'delete stage' abstraction
if object_id(N'[{{{schema}}}].[{{{entity}}}.DeleteStage]',N'U') is not null drop table [{{{schema}}}].[{{{entity}}}.DeleteStage];

create table [{{{schema}}}].[{{{entity}}}.DeleteStage]
 (
   [psa_stage_key] int identity (1,1),
   constraint [pk : {{{schema}}}.{{{entity}}}.DeleteStage {PSA Surrogate Key}]
   primary key clustered ([psa_stage_key])
   with (data_compression=page,fillfactor=95) on [TMP],

{{{bichunk}}}

   constraint [ak : {{{schema}}}.{{{entity}}}.DeleteStage {Source Natural Key}]
   unique nonclustered {{{akchunk}}}
   with (data_compression=page,fillfactor=80) on [TMP]
 );

grant alter,select,insert,update,delete on [{{{schema}}}].[{{{entity}}}.DeleteStage] to [psa_etl_manager];</value>
    <comment>Contains Security Definition too.</comment>
  </data>
  <data name="PSA_ServiceBrokerDefinition" xml:space="preserve">
    <value>-- message type
if not exists(select 1 from sys.service_message_types where [name]='//{{{schema}}}/{{{entity}}}/Message/Request') begin;
   create message type [//{{{schema}}}/{{{entity}}}/Message/Request]
   validation=well_formed_xml;
end;

if not exists(select 1 from sys.service_message_types where [name]='//{{{schema}}}/{{{entity}}}/Message/Result') begin;
   create message type [//{{{schema}}}/{{{entity}}}/Message/Result]
   validation=well_formed_xml;
end;

-- contract
if not exists(select 1 from sys.service_contracts where [name]='//{{{schema}}}/{{{entity}}}/Contract') begin;
   create contract [//{{{schema}}}/{{{entity}}}/Contract]
    (
      [//{{{schema}}}/{{{entity}}}/Message/Request] sent by initiator,
      [//{{{schema}}}/{{{entity}}}/Message/Result] sent by target
    );
end;

-- queues
if object_id(N'[{{{schema}}}].[{{{entity}}}.ProcessingUpsert]',N'SQ') is null begin;
   create queue [{{{schema}}}].[{{{entity}}}.ProcessingUpsert] with status=on,
   activation
    (
      status=on,
      procedure_name=[{{{schema}}}].[{{{entity}}}.WorkerUpsert],
      max_queue_readers={{{threads}}},
      execute as self
    );
end else begin;
   alter queue [{{{schema}}}].[{{{entity}}}.ProcessingUpsert] with status=on,
   activation
    (
      status=on,
      procedure_name=[{{{schema}}}].[{{{entity}}}.WorkerUpsert],
      max_queue_readers={{{threads}}},
      execute as self
    );
end;

if object_id(N'[{{{schema}}}].[{{{entity}}}.ProcessingDelete]',N'SQ') is null begin;
   create queue [{{{schema}}}].[{{{entity}}}.ProcessingDelete] with status=on,
   activation
    (
      status=on,
      procedure_name=[{{{schema}}}].[{{{entity}}}.WorkerDelete],
      max_queue_readers={{{threads}}},
      execute as self
    );
end else begin;
   alter queue [{{{schema}}}].[{{{entity}}}.ProcessingDelete] with status=on,
   activation
    (
      status=on,
      procedure_name=[{{{schema}}}].[{{{entity}}}.WorkerDelete],
      max_queue_readers={{{threads}}},
      execute as self
    );
end;

if object_id(N'[{{{schema}}}].[{{{entity}}}.RequestUpsert]',N'SQ') is null begin;
   create queue [{{{schema}}}].[{{{entity}}}.RequestUpsert] with status=on;
end;

if object_id(N'[{{{schema}}}].[{{{entity}}}.RequestDelete]',N'SQ') is null begin;
   create queue [{{{schema}}}].[{{{entity}}}.RequestDelete] with status=on;
end;

-- services
if not exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Processing') begin;
   create service [//{{{schema}}}/{{{entity}}}/Upsert/Service/Processing]
   on queue [{{{schema}}}].[{{{entity}}}.ProcessingUpsert]([//{{{schema}}}/{{{entity}}}/Contract]);
end;

if not exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Request') begin;
   create service [//{{{schema}}}/{{{entity}}}/Upsert/Service/Request]
   on queue [{{{schema}}}].[{{{entity}}}.RequestUpsert];
end;

if not exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Processing') begin;
   create service [//{{{schema}}}/{{{entity}}}/Delete/Service/Processing]
   on queue [{{{schema}}}].[{{{entity}}}.ProcessingDelete]([//{{{schema}}}/{{{entity}}}/Contract]);
end;

if not exists(select 1 from sys.services where [name]=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Request') begin;
   create service [//{{{schema}}}/{{{entity}}}/Delete/Service/Request]
   on queue [{{{schema}}}].[{{{entity}}}.RequestDelete];
end;</value>
  </data>
  <data name="PSA_ProcessUpsertDefinition" xml:space="preserve">
    <value>create procedure [{{{schema}}}].[{{{entity}}}.ProcessUpsert]
 (
   @i_MaxRowCount int
 ) with execute as N'psa_sb_manager'
as
-- do not alter/add/extend this stored procedure, or any psa stored procedure
-- authored by slalom consulting 2014
set nocount on;

-- check to see is object is actively running on another thread
if not exists(
   select
      N'?'
   from
      sys.dm_broker_queue_monitors
   where
      object_name([queue_id])=N'{{{entity}}}.ProcessingUpsert'
      and
      object_schema_name([queue_id])=N'{{{schema}}}'
      and
      database_id=db_id()
      and
      [state]=N'INACTIVE'
 ) begin;
   print N'There is already an active session for procedure [{{{schema}}}].[{{{entity}}}.ProcessUpsert]. Execution is aborted.'
   return -1;
end;

-- declare variables
declare @rc int, @mn int, @mx int;
declare @hist table([min] int,[max] int,[initiated] bit,[fulfilled] bit,[err] int,[errmsg] nvarchar(1000),unique([min] asc));

-- get bucketing inputs
select
   @rc=count([psa_stage_key]),
   @mn=min([psa_stage_key]),
   @mx=max([psa_stage_key]),
   @i_MaxRowCount=isnull(@i_MaxRowCount,1000000)
from
   [{{{schema}}}].[{{{entity}}}.UpsertStage];

-- if we have no records, bail
if @rc=0 begin;
   print N'There are no records to process in [{{{schema}}}].[{{{entity}}}.UpsertStage]. Execution is aborted.'
   return -1;
end;

-- get the histogram
with [recur] as
 (
   select
      @mn [min],
      case when (@mn+@i_MaxRowCount-1)&gt;=@mx then @mx else (@mn+@i_MaxRowCount-1) end [max]
   union all
   select
      [max]+1,
      case when ([max]+@i_MaxRowCount)&gt;=@mx then @mx else ([max]+@i_MaxRowCount) end  [max]
   from
      [recur]
   where
      [max]&lt;@mx
 )
insert @hist
 (
   [min],
   [max],
   [initiated],
   [fulfilled]
 )
select
   [min],
   [max],
   0,
   0
from
   [recur];

declare @conversation_handle uniqueidentifier;
declare @from_service sysname=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Request';
declare @to_service sysname=N'//{{{schema}}}/{{{entity}}}/Upsert/Service/Processing';
declare @contract sysname=N'//{{{schema}}}/{{{entity}}}/Contract';
declare @message_type sysname=N'//{{{schema}}}/{{{entity}}}/Message/Request';
declare @msg xml;

-- before we begin the process, lock the table
if not exists(select N'?' from sys.objects where [name]=N'{{{schema}}}.{{{entity}}}.UpsertStage is in a read-only state.') begin;
   alter table [{{{schema}}}].[{{{entity}}}.UpsertStage] with nocheck add constraint [{{{schema}}}.{{{entity}}}.UpsertStage is in a read-only state.] check(1=0);
end;

-- lets roll...
begin try;

   -- begin the broker conversation
   begin dialog conversation @conversation_handle 
   from service @from_service
   to service @to_service
   on contract @contract
   with encryption=off;

   -- queue each bucket in histogram
   while (select min([min]) from @hist where [initiated]=0) is not null begin;
      select @rc=min([min]) from @hist where [initiated]=0;

      select @msg=N'&lt;msg&gt;'+
                  N'&lt;min&gt;'+convert(nvarchar(10),[min])+N'&lt;/min&gt;'+
                  N'&lt;max&gt;'+convert(nvarchar(10),[max])+N'&lt;/max&gt;'+
                  N'&lt;batch&gt;'+isnull(convert(nvarchar(36),try_convert(uniqueidentifier,context_info())),N'')+N'&lt;/batch&gt;'+
                  N'&lt;/msg&gt;'
      from @hist
      where [min]=@rc;

      -- this will open up the worker threads to process the staged set
      send on conversation @conversation_handle
      message type @message_type(@msg);

      update @hist set [initiated]=1 where [min]=@rc;
   end;

   -- get return queue
   while (select min([min]) from @hist where [fulfilled]=0) is not null begin;

      begin transaction;

      waitfor(receive top(1) @msg=convert(xml,[message_body]) from [{{{schema}}}].[{{{entity}}}.RequestUpsert]),timeout 3000;

      if @@rowcount&gt;0 begin;
         select @mn=@msg.value('(/msg/min)[1]','int');
         select @mx=@msg.value('(/msg/max)[1]','int');
         update @hist set [fulfilled]=1 where [min]=@mn and [max]=@mx;
      end;

      commit transaction;
   end;

   end conversation @conversation_handle;

   truncate table [{{{schema}}}].[{{{entity}}}.UpsertStage];

   {{{updatestats}}}update statistics [sys].[change_tracking_{{{objectid}}}] with fullscan;

end try begin catch;

   declare @re nvarchar(4000)=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.ProcessUpsert] threw error number ''%d'' with the message ''%s'' :: Batch GUID: %s.';
   declare @en int=error_number(),@em nvarchar(4000)=error_message(),@b nvarchar(36)=try_convert(nvarchar(36),null);
   raiserror(@re,16,1,@en,@em,@b) with log;

end catch;

-- remove any locking on the table
if  exists(select N'?' from sys.objects where [name]=N'{{{schema}}}.{{{entity}}}.UpsertStage is in a read-only state.') begin;
   alter table [{{{schema}}}].[{{{entity}}}.UpsertStage] drop constraint [{{{schema}}}.{{{entity}}}.UpsertStage is in a read-only state.];
end;

return @@error;</value>
  </data>
  <data name="PSA_WorkerUpsertDefinition" xml:space="preserve">
    <value>create procedure [{{{schema}}}].[{{{entity}}}.WorkerUpsert]
as
-- do not alter/add/extend this stored procedure, or any psa stored procedure
-- authored by slalom consulting 2014
set nocount on;

-- declare variables
declare @conversation_handle uniqueidentifier;
declare @inbound_message_body xml;
declare @outbound_message_body xml;
declare @message_type_name sysname;
declare @min_psa_stage_key int;
declare @max_psa_stage_key int;
declare @batch_id varbinary(128);
declare @re nvarchar(4000);
declare @en int;
declare @em nvarchar(4000);
declare @b nvarchar(36);

-- declare constants
declare @request_message sysname=N'//{{{schema}}}/{{{entity}}}/Message/Request';
declare @result_message sysname=N'//{{{schema}}}/{{{entity}}}/Message/Result';
declare @end_dialog_message sysname=N'http://schemas.microsoft.com/SQL/ServiceBroker/EndDialog';
declare @error_message sysname=N'http://schemas.microsoft.com/SQL/ServiceBroker/Error';

-- instantiate loop and continue until nothing left in queue
while 1!=2 begin;

   begin transaction;

      --  get the next item in the queue
      waitfor
       (
         receive top(1)
            @conversation_handle=[conversation_handle],
            @message_type_name=[message_type_name],
            @inbound_message_body=convert(xml,[message_body]) 
         from 
            [{{{schema}}}].[{{{entity}}}.ProcessingUpsert]
       ), timeout 3000; -- three seconds

      -- if there was nothing in the queue, rollback and exit the loop
      if @@rowcount=0 begin;
         rollback transaction;
         break;
      end;

      -- handle the receive message
      if @message_type_name=@request_message begin;

      -- get the min and max keys
      select
         @min_psa_stage_key=@inbound_message_body.value('(/msg/min)[1]','int'),
         @max_psa_stage_key=@inbound_message_body.value('(/msg/max)[1]','int'),
         @batch_id=try_convert(uniqueidentifier,@inbound_message_body.value('(/msg/batch)[1]','nvarchar(100)'));

      --add context info for batching
      if @batch_id is not null begin;
         set context_info @batch_id;
      end else begin;
         set context_info 0x;
      end;

      -- merge items from the upsert queue based on those keys
      begin try;

         with [merge_source] as
          (
            select
{{{columnset}}}
            from
               [{{{schema}}}].[{{{entity}}}.UpsertStage]
            where
               [psa_stage_key] between @min_psa_stage_key and @max_psa_stage_key
          )
         merge
            [{{{schema}}}].[{{{entity}}}.Control] t
         using
            [merge_source] s on -1!=1
{{{mergejoinchunk}}} 
         when matched then
            update
               -- [{{{schema}}}].[{{{entity}}}.Control] 
            set
{{{updateset}}}
         when not matched by target then
            insert -- [{{{schema}}}].[{{{entity}}}.Control] 
             (
{{{columnset}}}
             )
            values
             (
{{{insertset}}}
             );

         -- build the outbound message
         select @outbound_message_body=N'&lt;msg&gt;'+
                                       N'&lt;min&gt;'+convert(nvarchar(10),@min_psa_stage_key)+N'&lt;/min&gt;'+
                                       N'&lt;max&gt;'+convert(nvarchar(10),@max_psa_stage_key)+N'&lt;/max&gt;'+
                                       N'&lt;rc&gt;'+convert(nvarchar(10),@@rowcount)+N'&lt;/rc&gt;'+
                                       N'&lt;/msg&gt;';

      end try begin catch;

         select @re=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.WorkerUpsert] threw a merge dml error number ''%d'' with the message ''%s'' :: Batch GUID: %s.';
         select @en=error_number(),@em=error_message(),@b=try_convert(nvarchar(36),@batch_id);
         raiserror(@re,16,1,@en,@em,@b) with log;

         -- build the outbound message
         select @outbound_message_body=N'&lt;msg&gt;'+
                                       N'&lt;min&gt;'+convert(nvarchar(10),@min_psa_stage_key)+N'&lt;/min&gt;'+
                                       N'&lt;max&gt;'+convert(nvarchar(10),@max_psa_stage_key)+N'&lt;/max&gt;'+
                                       N'&lt;rc&gt;0&lt;/rc&gt;'+
                                       N'&lt;error_number&gt;'+convert(nvarchar(10),@en)+N'&lt;/error_number&gt;'+
                                       N'&lt;error_message&gt;'+convert(nvarchar(4000),@em)+N'&lt;/error_message&gt;'+
                                       N'&lt;/msg&gt;';

      end catch;

      -- and, send it...
      send on conversation @conversation_handle
      message type @result_message(@outbound_message_body);

   -- if we get an 'end dialog', simply close the conversation
   end else if @message_type_name=@end_dialog_message begin;
      end conversation @conversation_handle;

   -- if we get an 'error dialog', taco [no] bueno, log error and bail
   end else if @message_type_name=@error_message begin
      
      -- log error and end conversation
      select @re=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.WorkerUpsert] received an error message type from the ProcessingUpsert queue. :: Batch GUID: %s.';
      select @b=try_convert(nvarchar(36),@batch_id);
      raiserror(@re,16,1,@b) with log;
      end conversation @conversation_handle;

   end; -- handling message

   -- commit the transaction
   commit transaction;

end; -- loop
return @@error;</value>
  </data>
  <data name="PSA_ServiceBrokerLoginDefinition" xml:space="preserve">
    <value>if not exists(select * from sys.syslogins where [name]=N'psa_sb_manager') begin;
   create login [psa_sb_manager] with password=N'{{{pw}}}', default_database=[edw_psa], check_expiration=off, check_policy=off
end;
grant view server state to [psa_sb_manager];</value>
  </data>
  <data name="PSA_ServiceBrokerUserDefinition" xml:space="preserve">
    <value>if not exists(select N'?' from sys.sysusers where [name]=N'psa_sb_manager') begin;
   create user [psa_sb_manager] for login [psa_sb_manager];
end;
alter role [db_owner] add member [psa_sb_manager];</value>
  </data>
  <data name="PSA_ProcessUpsertSecurityDefinition" xml:space="preserve">
    <value>grant execute on [{{{schema}}}].[{{{entity}}}.ProcessUpsert] to [psa_etl_manager];</value>
  </data>
  <data name="PSA_GetModel" xml:space="preserve">
    <value>set nocount on;
declare @apos_rep nvarchar(10)=N'|~|~|';

with attr as
 (
   select
      N'['+[psa_schema]+N'].['+[psa_entity]+N']' [@psa_domain],
      [psa_schema],
      [psa_entity],
      replace([psa_entity_description],N'''',@apos_rep) [psa_entity_description],
      [source_schema],
      [source_entity],
      [psa_max_threads],
      [psa_hash_large_objects],
      [etl_build_group],
      [etl_sequence_order],
      [etl_max_record_count],
      [etl_infer_deletions],
      [etl_full_load],
      replace([etl_fixed_predicate],N'''',@apos_rep) [etl_fixed_predicate],
      replace([etl_variable_predicate],N'''',@apos_rep) [etl_variable_predicate],
      replace([etl_source_variables],N'''',@apos_rep) [etl_source_variables],
      convert(xml,sq.[attribute]) [attributes]
   from
      [master].[dbo].[psa_entity_definition] e
      cross apply
       (
         select
            [psa_attribute],
            [psa_attribute_datatype],
            [psa_attribute_ordinal],
            [psa_attribute_sort],
            [psa_attribute_optional],
            [psa_attribute_business_id],
	         [psa_attribute_index],
            replace([psa_attribute_description],N'''',@apos_rep) [psa_attribute_description]
         from
            [dbo].[psa_attribute_definition] a
         where
            e.[psa_schema]=a.[psa_schema]
            and
            e.[psa_entity]=a.[psa_entity]
         for xml path('attribute')
       ) sq(attribute)
 ), ent([psa_model]) as
 (
   select
      [@psa_domain],
      [psa_schema],
      [psa_entity],
      [psa_entity_description],
      [source_schema],
      [source_entity],
      [psa_max_threads],
      [psa_hash_large_objects],
      [etl_build_group],
      [etl_sequence_order],
      [etl_max_record_count],
      [etl_infer_deletions],
      [etl_full_load],
      [etl_fixed_predicate],
      [etl_variable_predicate],
      [etl_source_variables],
      [attributes]
   from
      attr
   for xml path('entity')
 ) 
select
   convert(xml,N'&lt;entities&gt;'+[psa_model]+N'&lt;/entities&gt;') [psa_model]
from
   ent;</value>
  </data>
  <data name="PSA_SetModel" xml:space="preserve">
    <value>declare @xml xml='{{{xml}}}';

set nocount on;
declare @apos_rep nvarchar(10)=N'|~|~|';

begin try;

   delete [master].[dbo].[psa_attribute_definition];
   delete [master].[dbo].[psa_entity_definition];

   insert [master].[dbo].[psa_entity_definition]
    (
      [psa_schema],
      [psa_entity],
      [psa_entity_description],
      [source_schema],
      [source_entity],
      [psa_max_threads],
      [psa_hash_large_objects],
      [etl_build_group],
      [etl_sequence_order],
      [etl_max_record_count],
      [etl_infer_deletions],
      [etl_full_load],
      [etl_fixed_predicate],
      [etl_variable_predicate],
      [etl_source_variables]
    )
   select
      x.e.value('./psa_schema[1]',N'nvarchar(4)') [psa_schema],
      x.e.value('./psa_entity[1]',N'nvarchar(31)') [psa_entity],
      replace(x.e.value('./psa_entity_description[1]',N'nvarchar(4000)'),@apos_rep,N'''') [psa_entity_description],
      x.e.value('./source_schema[1]',N'nvarchar(128)') [source_schema],
      x.e.value('./source_entity[1]',N'nvarchar(128)') [source_entity],
      x.e.value('./psa_max_threads[1]',N'int') [etl_max_threads],
      x.e.value('./psa_hash_large_objects[1]',N'nvarchar(3)') [hash_large_objects],
      x.e.value('./etl_build_group[1]',N'nvarchar(128)') [etl_build_group],
      x.e.value('./etl_sequence_order[1]',N'smallint') [etl_sequence_order],
      x.e.value('./etl_max_record_count[1]',N'int') [etl_max_record_count],
      x.e.value('./etl_infer_deletions[1]',N'nvarchar(3)') [psa_infer_deletions],
      x.e.value('./etl_full_load[1]',N'nvarchar(3)') [etl_full_load],
      replace(x.e.value('./etl_fixed_predicate[1]',N'nvarchar(max)'),@apos_rep,N'''') [etl_fixed_predicate],
      replace(x.e.value('./etl_variable_predicate[1]',N'nvarchar(max)'),@apos_rep,N'''') [etl_variable_predicate],
      replace(x.e.value('./etl_source_variables[1]',N'nvarchar(max)'),@apos_rep,N'''') [etl_source_variables]
   from
      @xml.nodes('/entities/entity') x(e);

   insert [master].[dbo].[psa_attribute_definition]
    (
      [psa_schema],
      [psa_entity],
      [psa_attribute],
      [psa_attribute_datatype],
      [psa_attribute_ordinal],
      [psa_attribute_sort],
      [psa_attribute_optional],
      [psa_attribute_business_id],
      [psa_attribute_index],
      [psa_attribute_description]
    )
   select
      p.e.value('./psa_schema[1]',N'nvarchar(4)') [psa_schema],
      p.e.value('./psa_entity[1]',N'nvarchar(31)') [psa_entity],
      c.a.value('./psa_attribute[1]',N'sysname') [psa_attribute],
      c.a.value('./psa_attribute_datatype[1]',N'sysname') [psa_attribute_datatype],
      c.a.value('./psa_attribute_ordinal[1]',N'int') [psa_attribute_ordinal],
      c.a.value('./psa_attribute_sort[1]',N'nvarchar(4)') [psa_attribute_sort],
      c.a.value('./psa_attribute_optional[1]',N'nvarchar(3)') [psa_attribute_optional],
      c.a.value('./psa_attribute_business_id[1]',N'nvarchar(3)') [psa_attribute_business_id],
      c.a.value('./psa_attribute_index[1]',N'nvarchar(3)') [psa_attribute_index],
      replace(c.a.value('./psa_attribute_description[1]',N'nvarchar(4000)'),@apos_rep,N'''') [psa_attribute_description]
   from
      @xml.nodes('/entities/entity') p(e)
      cross apply
      p.e.nodes('./attributes/attribute') c(a);

end try begin catch;

      declare @ErrorMessage nvarchar(4000)=error_message();
      declare @ErrorSeverity int=error_severity();
      declare @ErrorState int=error_state();
      raiserror(@ErrorMessage,@ErrorSeverity,@ErrorState) with log;

end catch;</value>
  </data>
  <data name="PSA_LoggingDefinition" xml:space="preserve">
    <value>if object_id(N'[dbo].[psa_batch_control]',N'U') is null begin;

   create table [dbo].[psa_batch_control] 
    (
      [psa_batch_id] uniqueidentifier not null
      constraint [df : dbo.psa_batch_control {Sequential GUID}] default (newsequentialid()),
	   constraint [pk : dbo.psa_batch_control :: psa_batch_id]
      primary key clustered ([psa_batch_id] asc)
      with (fillfactor=80),
	   [psa_batch_ssis_id] bigint not null,
      [psa_package_name] nvarchar(128) null,
	   [psa_batch_start] datetime2(7) not null,
	   [psa_batch_end] datetime2(7) null,
      [psa_batch_completed] as (convert(bit,case when [psa_batch_end] is not null then 1 else 0 end)) persisted not null
    );

   exec sys.sp_MS_marksystemobject 'psa_batch_control';
end;

if object_id(N'[dbo].[psa_start_batch]',N'P') is null begin;

exec sys.sp_executesql N'
create procedure [dbo].[psa_start_batch]
 (
	@psa_batch_ssis_id bigint,
   @psa_package_name nvarchar(128)
 )
as
set nocount on;

insert [dbo].[psa_batch_control]
 (
   [psa_batch_ssis_id],
   [psa_batch_start],
   [psa_package_name]
 )
output
   inserted.[psa_batch_id]
values 
 (
   @psa_batch_ssis_id,
   sysutcdatetime(),
   @psa_package_name
 );

return @@error;'

end;

exec sys.sp_MS_marksystemobject 'psa_start_batch';

grant execute on [dbo].[psa_start_batch] to [psa_etl_manager];

if object_id(N'[dbo].[psa_end_batch]',N'P') is null begin;

exec sys.sp_executesql N'
create procedure [dbo].[psa_end_batch]
 (
	@psa_batch_id uniqueidentifier
 )
as
set nocount on;

update
   [dbo].[psa_batch_control] 
set
   [psa_batch_end]=sysutcdatetime()
where
   [psa_batch_id]=@psa_batch_id;

return @@error;'
end;

exec sys.sp_MS_marksystemobject 'psa_end_batch';

grant execute on [dbo].[psa_end_batch] to [psa_etl_manager];</value>
  </data>
  <data name="PSA_ProcessDeleteDefinition" xml:space="preserve">
    <value>create procedure [{{{schema}}}].[{{{entity}}}.ProcessDelete]
 (
   @i_MaxRowCount int
 ) with execute as N'psa_sb_manager'
as
-- do not alter/add/extend this stored procedure, or any psa stored procedure
-- authored by slalom consulting 2014
set nocount on;

-- check to see is object is actively running on another thread
if not exists(
   select
      N'?'
   from
      sys.dm_broker_queue_monitors
   where
      object_name([queue_id])=N'{{{entity}}}.ProcessingDelete'
      and
      object_schema_name([queue_id])=N'{{{schema}}}'
      and
      database_id=db_id()
      and
      [state]=N'INACTIVE'
 ) begin;
   print N'There is already an active session for procedure [{{{schema}}}].[{{{entity}}}.ProcessDelete]. Execution is aborted.'
   return -1;
end;

-- declare variables
declare @rc int, @mn int, @mx int;
declare @hist table([min] int,[max] int,[initiated] bit,[fulfilled] bit,[err] int,[errmsg] nvarchar(1000),unique([min] asc));

-- get bucketing inputs
select
   @rc=count([psa_stage_key]),
   @mn=min([psa_stage_key]),
   @mx=max([psa_stage_key]),
   @i_MaxRowCount=isnull(@i_MaxRowCount,1000000)
from
   [{{{schema}}}].[{{{entity}}}.DeleteStage];

-- if we have no records, bail
if @rc=0 begin;
   print N'There are no records to process in [{{{schema}}}].[{{{entity}}}.DeleteStage]. Execution is aborted.'
   return -1;
end;

-- get the histogram
with [recur] as
 (
   select
      @mn [min],
      case when (@mn+@i_MaxRowCount-1)&gt;=@mx then @mx else (@mn+@i_MaxRowCount-1) end [max]
   union all
   select
      [max]+1,
      case when ([max]+@i_MaxRowCount)&gt;=@mx then @mx else ([max]+@i_MaxRowCount) end  [max]
   from
      [recur]
   where
      [max]&lt;@mx
 )
insert @hist
 (
   [min],
   [max],
   [initiated],
   [fulfilled]
 )
select
   [min],
   [max],
   0,
   0
from
   [recur];

declare @conversation_handle uniqueidentifier;
declare @from_service sysname=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Request';
declare @to_service sysname=N'//{{{schema}}}/{{{entity}}}/Delete/Service/Processing';
declare @contract sysname=N'//{{{schema}}}/{{{entity}}}/Contract';
declare @message_type sysname=N'//{{{schema}}}/{{{entity}}}/Message/Request';
declare @msg xml;

-- before we begin the process, lock the table
if not exists(select N'?' from sys.objects where [name]=N'{{{schema}}}.{{{entity}}}.DeleteStage is in a read-only state.') begin;
   alter table [{{{schema}}}].[{{{entity}}}.DeleteStage] with nocheck add constraint [{{{schema}}}.{{{entity}}}.DeleteStage is in a read-only state.] check(1=0);
end;

-- lets roll...
begin try;

   -- begin the broker conversation
   begin dialog conversation @conversation_handle 
   from service @from_service
   to service @to_service
   on contract @contract
   with encryption=off;

   -- queue each bucket in histogram
   while (select min([min]) from @hist where [initiated]=0) is not null begin;
      select @rc=min([min]) from @hist where [initiated]=0;

      select @msg=N'&lt;msg&gt;'+
                  N'&lt;min&gt;'+convert(nvarchar(10),[min])+N'&lt;/min&gt;'+
                  N'&lt;max&gt;'+convert(nvarchar(10),[max])+N'&lt;/max&gt;'+
                  N'&lt;batch&gt;'+isnull(convert(nvarchar(36),try_convert(uniqueidentifier,context_info())),N'')+N'&lt;/batch&gt;'+
                  N'&lt;/msg&gt;'
      from @hist
      where [min]=@rc;

      -- this will open up the worker threads to process the staged set
      send on conversation @conversation_handle
      message type @message_type(@msg);

      update @hist set [initiated]=1 where [min]=@rc;
   end;

   -- get return queue
   while (select min([min]) from @hist where [fulfilled]=0) is not null begin;

      begin transaction;

      waitfor(receive top(1) @msg=convert(xml,[message_body]) from [{{{schema}}}].[{{{entity}}}.RequestDelete]),timeout 3000;

      if @@rowcount&gt;0 begin;
         select @mn=@msg.value('(/msg/min)[1]','int');
         select @mx=@msg.value('(/msg/max)[1]','int');
         update @hist set [fulfilled]=1 where [min]=@mn and [max]=@mx;
      end;

      commit transaction;
   end;

   end conversation @conversation_handle;

   truncate table [{{{schema}}}].[{{{entity}}}.DeleteStage];

   {{{updatestats}}}update statistics [sys].[change_tracking_{{{objectid}}}] with fullscan;

end try begin catch;

   declare @re nvarchar(4000)=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.ProcessDelete] threw error number ''%d'' with the message ''%s'' :: Batch GUID: %s.';
   declare @en int=error_number(),@em nvarchar(4000)=error_message(),@b nvarchar(36)=try_convert(nvarchar(36),null);
   raiserror(@re,16,1,@en,@em,@b) with log;

end catch;

-- remove any locking on the table
if  exists(select N'?' from sys.objects where [name]=N'{{{schema}}}.{{{entity}}}.DeleteStage is in a read-only state.') begin;
   alter table [{{{schema}}}].[{{{entity}}}.DeleteStage] drop constraint [{{{schema}}}.{{{entity}}}.DeleteStage is in a read-only state.];
end;

return @@error;</value>
  </data>
  <data name="PSA_WorkerDeleteDefinition" xml:space="preserve">
    <value>create procedure [{{{schema}}}].[{{{entity}}}.WorkerDelete]
as
-- do not alter/add/extend this stored procedure, or any psa stored procedure
-- authored by slalom consulting 2014
set nocount on;

-- declare variables
declare @conversation_handle uniqueidentifier;
declare @inbound_message_body xml;
declare @outbound_message_body xml;
declare @message_type_name sysname;
declare @min_psa_stage_key int;
declare @max_psa_stage_key int;
declare @batch_id varbinary(128);
declare @re nvarchar(4000);
declare @en int;
declare @em nvarchar(4000);
declare @b nvarchar(36);

-- declare constants
declare @request_message sysname=N'//{{{schema}}}/{{{entity}}}/Message/Request';
declare @result_message sysname=N'//{{{schema}}}/{{{entity}}}/Message/Result';
declare @end_dialog_message sysname=N'http://schemas.microsoft.com/SQL/ServiceBroker/EndDialog';
declare @error_message sysname=N'http://schemas.microsoft.com/SQL/ServiceBroker/Error';

-- instantiate loop and continue until nothing left in queue
while 1!=2 begin;

   begin transaction;

      --  get the next item in the queue
      waitfor
       (
         receive top(1)
            @conversation_handle=[conversation_handle],
            @message_type_name=[message_type_name],
            @inbound_message_body=convert(xml,[message_body]) 
         from 
            [{{{schema}}}].[{{{entity}}}.ProcessingDelete]
       ), timeout 3000; -- three seconds

      -- if there was nothing in the queue, rollback and exit the loop
      if @@rowcount=0 begin;
         rollback transaction;
         break;
      end;

      -- handle the receive message
      if @message_type_name=@request_message begin;

      -- get the min and max keys
      select
         @min_psa_stage_key=@inbound_message_body.value('(/msg/min)[1]','int'),
         @max_psa_stage_key=@inbound_message_body.value('(/msg/max)[1]','int'),
         @batch_id=try_convert(uniqueidentifier,@inbound_message_body.value('(/msg/batch)[1]','nvarchar(100)'));

      --add context info for batching
      if @batch_id is not null begin;
         set context_info @batch_id;
      end else begin;
         set context_info 0x;
      end;

      -- merge items from the upsert queue based on those keys
      begin try;

         with [merge_source] as
          (
            select
{{{columnset}}}
            from
               [{{{schema}}}].[{{{entity}}}.DeleteStage]
            where
               [psa_stage_key] between @min_psa_stage_key and @max_psa_stage_key
          )
         merge
            [{{{schema}}}].[{{{entity}}}.Control] t
         using
            [merge_source] s on -1!=1
{{{mergejoinchunk}}} 
         when matched then
            delete;

         -- build the outbound message
         select @outbound_message_body=N'&lt;msg&gt;'+
                                       N'&lt;min&gt;'+convert(nvarchar(10),@min_psa_stage_key)+N'&lt;/min&gt;'+
                                       N'&lt;max&gt;'+convert(nvarchar(10),@max_psa_stage_key)+N'&lt;/max&gt;'+
                                       N'&lt;rc&gt;'+convert(nvarchar(10),@@rowcount)+N'&lt;/rc&gt;'+
                                       N'&lt;/msg&gt;';

      end try begin catch;

         select @re=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.WorkerDelete] threw a merge dml error number ''%d'' with the message ''%s'' :: Batch GUID: %s.';
         select @en=error_number(),@em=error_message(),@b=try_convert(nvarchar(36),@batch_id);
         raiserror(@re,16,1,@en,@em,@b) with log;

         -- build the outbound message
         select @outbound_message_body=N'&lt;msg&gt;'+
                                       N'&lt;min&gt;'+convert(nvarchar(10),@min_psa_stage_key)+N'&lt;/min&gt;'+
                                       N'&lt;max&gt;'+convert(nvarchar(10),@max_psa_stage_key)+N'&lt;/max&gt;'+
                                       N'&lt;rc&gt;0&lt;/rc&gt;'+
                                       N'&lt;error_number&gt;'+convert(nvarchar(10),@en)+N'&lt;/error_number&gt;'+
                                       N'&lt;error_message&gt;'+convert(nvarchar(4000),@em)+N'&lt;/error_message&gt;'+
                                       N'&lt;/msg&gt;';

      end catch;

      -- and, send it...
      send on conversation @conversation_handle
      message type @result_message(@outbound_message_body);

   -- if we get an 'end dialog', simply close the conversation
   end else if @message_type_name=@end_dialog_message begin;
      end conversation @conversation_handle;

   -- if we get an 'error dialog', taco [no] bueno, log error and bail
   end else if @message_type_name=@error_message begin
      
      -- log error and end conversation
      select @re=N'PSA Error :: Procedure [{{{schema}}}].[{{{entity}}}.WorkerDelete] received an error message type from the ProcessingDelete queue. :: Batch GUID: %s.';
      select @b=try_convert(nvarchar(36),@batch_id);
      raiserror(@re,16,1,@b) with log;
      end conversation @conversation_handle;

   end; -- handling message

   -- commit the transaction
   commit transaction;

end; -- loop
return @@error;</value>
  </data>
  <data name="PSA_ProcessDeleteSecurityDefinition" xml:space="preserve">
    <value>grant execute on [{{{schema}}}].[{{{entity}}}.ProcessDelete] to [psa_etl_manager];</value>
  </data>
  <data name="SYS_MetadataTableDefinition" xml:space="preserve">
    <value>if object_id(N'[dbo].[psa_entity_definition]',N'U') is null begin;

   create table [dbo].[psa_entity_definition]
    (
      [psa_schema] nvarchar(4) collate Latin1_General_100_BIN2,
      constraint [ck : dbo.psa_entity_definition :: psa_schema]
      check (len([psa_schema])=4),

      [psa_entity] nvarchar(31) collate Latin1_General_100_BIN2,
      
      constraint [pk : dbo.psa_entity_definition]
      primary key clustered ([psa_schema],[psa_entity]),

      [psa_entity_description] nvarchar(4000) collate Latin1_General_100_BIN2 null,
      
      [source_schema] nvarchar(128) collate Latin1_General_100_BIN2 not null,
      [source_entity] nvarchar(128) collate Latin1_General_100_BIN2 not null,

      [psa_hash_large_objects] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_entity_definition :: psa_hash_large_objects]
      check ([psa_hash_large_objects] in(N'Yes',N'No')),

      [psa_max_threads] int not null,

      [etl_build_group] nvarchar(128) collate Latin1_General_100_BIN2 not null,
      [etl_max_record_count] int not null,
      [etl_sequence_order] smallint not null,
      
      [etl_infer_deletions] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_entity_definition :: psa_infer_deletions]
      check ([etl_infer_deletions] in(N'Yes',N'No')),

      [etl_full_load] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_entity_definition :: etl_full_load]
      check ([etl_full_load] in(N'Yes',N'No')),
      
      [etl_source_variables] nvarchar(max) collate Latin1_General_100_BIN2 null,
      [etl_fixed_predicate] nvarchar(max) collate Latin1_General_100_BIN2 null,
      [etl_variable_predicate] nvarchar(max) collate Latin1_General_100_BIN2 null
    );

   exec sys.sp_MS_marksystemobject N'psa_entity_definition';

end;

if object_id(N'[dbo].[psa_attribute_definition]',N'U') is null begin;

   create table [dbo].[psa_attribute_definition]
    (
      [psa_schema] nvarchar(4) collate Latin1_General_100_BIN2,
      constraint [ck : dbo.psa_attribute_definition :: psa_schema]
      check (len([psa_schema])=4),

      [psa_entity] nvarchar(31) collate Latin1_General_100_BIN2,
      
      constraint [fk : psa_attribute_definition $ psa_entity_definition]
      foreign key ([psa_schema],[psa_entity]) 
      references [dbo].[psa_entity_definition] ([psa_schema],[psa_entity])
      on update cascade,

      [psa_attribute] nvarchar(128) collate Latin1_General_100_BIN2 not null,
      constraint [pk : dbo.psa_attribute_definition]
      primary key clustered ([psa_schema],[psa_entity],[psa_attribute]),
      
      [psa_attribute_datatype] nvarchar(128) collate Latin1_General_100_BIN2 not null,
      
      [psa_attribute_ordinal] int not null,
      
      [psa_attribute_sort] nvarchar(4) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_attribute_definition :: psa_attribute_sort]
      check ([psa_attribute_sort] in(N'asc',N'desc')),
      
      [psa_attribute_optional] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_attribute_definition :: psa_attribute_optional]
      check ([psa_attribute_optional] in(N'Yes',N'No')),
      
      [psa_attribute_business_id] nvarchar(3) collate Latin1_General_100_BIN2,
      constraint [ck : dbo.psa_attribute_definition :: psa_attribute_business_id]
      check ([psa_attribute_business_id] in(N'Yes',N'No')),

      [psa_attribute_index] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.psa_attribute_definition :: psa_attribute_index]
      check ([psa_attribute_index] in(N'Yes',N'No')),
      
      [psa_attribute_description] nvarchar(4000) collate Latin1_General_100_BIN2 null
    );

   exec sys.sp_MS_marksystemobject N'psa_attribute_definition';

end;

if object_id(N'[dbo].[ara_entity_definition]',N'U') is null begin;

   create table [dbo].[ara_entity_definition]
    (
      [ara_entity] nvarchar(25) collate Latin1_General_100_BIN2,
      constraint [pk : dbo.ara_entity_definition]
      primary key clustered ([ara_entity]),

      [ara_entity_description] nvarchar(4000) collate Latin1_General_100_BIN2 null,

      [ara_entity_type] nvarchar(1) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.ara_entity_definition :: ara_entity_type]
      check ([ara_entity_type] in(N'1',N'2')),

      [ara_hash_large_objects] nvarchar(3) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.ara_entity_definition :: ara_hash_large_objects]
      check ([ara_hash_large_objects] in(N'Yes',N'No'))
    );

   exec sys.sp_MS_marksystemobject N'ara_entity_definition';

end;

if object_id(N'[dbo].[ara_attribute_definition]',N'U') is null begin;

   create table [dbo].[ara_attribute_definition]
    (
      [ara_entity] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      constraint [fk : dbo.ara_attribute_definition $ dbo.ara_entity_definition]
      foreign key ([ara_entity])
      references [dbo].[ara_entity_definition] ([ara_entity]),

      [ara_attribute] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      constraint [pk : dbo.ara_attribute_definition {entity | attribute}]
      primary key clustered ([ara_entity],[ara_attribute]),

      [ara_attribute_referenced_entity] nvarchar(25) collate Latin1_General_100_BIN2 null,
      constraint [fk : dbo.ara_attribute_definition $ dbo.ara_entity_definition $$ referenced]
      foreign key ([ara_attribute_referenced_entity])
      references [dbo].[ara_entity_definition] ([ara_entity]),

      [ara_attribute_referenced_entity_role] nvarchar(25) collate Latin1_General_100_BIN2 null,
      
      [ara_attribute_name] as convert(nvarchar(53),case when [ara_attribute_referenced_entity] is null 
                                                        then [ara_attribute] 
                                                        else isnull([ara_attribute_referenced_entity_role],N'')+[ara_attribute_referenced_entity]+N'Key'
                                                    end) collate Latin1_General_100_BIN2 persisted not null,

      constraint [ak : dbo.ara_attribute_definition {entity | attribute name}]
      unique nonclustered ([ara_entity],[ara_attribute_name]),

      [ara_attribute_datatype] sysname collate Latin1_General_100_BIN2,
      [ara_attribute_ordinal] int not null,
      [ara_attribute_sort] nvarchar(4) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.ara_attribute_definition :: ara_attribute_sort]
      check ([ara_attribute_sort] in(N'asc',N'desc')),

      [ara_attribute_optional] nvarchar(4) collate Latin1_General_100_BIN2 not null,
      constraint [ck : dbo.ara_attribute_definition :: ara_attribute_optional]
      check ([ara_attribute_optional] in(N'Yes',N'No')),
      
      [ara_attribute_business_identifier] nvarchar(3) collate Latin1_General_100_BIN2,
      constraint [ck : dbo.ara_attribute_definition :: ara_attribute_business_identifier]
      check ([ara_attribute_business_identifier] in(N'Yes',N'No')),

      [ara_attribute_description] nvarchar(4000) collate Latin1_General_100_BIN2 null,

      [ara_attribute_default] [nvarchar](max) collate Latin1_General_100_BIN2 null
    );

   exec sys.sp_MS_marksystemobject N'ara_attribute_definition';

end;

if object_id(N'[dbo].[ara_abstract_definition]',N'U') is null begin;

   create table [dbo].[ara_abstract_definition]
    (
      [ara_abstract_security_group] nvarchar(10) collate Latin1_General_100_BIN2 not null,
      [ara_abstract_name] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      constraint [pk : ara_abstract_definition]
      primary key clustered ([ara_abstract_security_group],[ara_abstract_name]),

      [ara_entity] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      constraint [fk : ara_abstract_definition $ ara_entity_definition]
      foreign key ([ara_entity])
      references [dbo].[ara_entity_definition] ([ara_entity]),

      [ara_abstract_security_role] as N'ara_abstract_'+lower([ara_abstract_security_group])+N'_reader' collate Latin1_General_100_BIN2 persisted not null,
      constraint [ak : ara_abstract_definition]
      unique nonclustered ([ara_abstract_security_role],[ara_abstract_name]),

      [ara_abstract_description] nvarchar(4000) collate Latin1_General_100_BIN2 null,
      [ara_abstract_predicate] nvarchar(max) collate Latin1_General_100_BIN2 null
    );

   exec sys.sp_MS_marksystemobject N'ara_abstract_definition';

end;

if object_id(N'[dbo].[ara_abstract_column_definition]',N'U') is null begin;

   create table [dbo].[ara_abstract_column_definition]
    (
      [ara_abstract_security_group] nvarchar(10) collate Latin1_General_100_BIN2 not null,
      [ara_abstract_name] nvarchar(25) collate Latin1_General_100_BIN2 not null,

      constraint [fk : ara_abstract_column_definition $ ara_abstract_definition]
      foreign key ([ara_abstract_security_group],[ara_abstract_name])
      references [dbo].[ara_abstract_definition] ([ara_abstract_security_group],[ara_abstract_name])
      on update cascade on delete cascade,

      [ara_attribute_name] nvarchar(53) collate Latin1_General_100_BIN2 not null,
      constraint [pk : ara_abstract_column_definition]
      primary key clustered ([ara_abstract_security_group],[ara_abstract_name],[ara_attribute_name]),

      [ara_entity] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      constraint [fk : ara_abstract_column_definition $ ara_attribute_definition]
      foreign key ([ara_entity],[ara_attribute_name])
      references [dbo].[ara_attribute_definition] ([ara_entity],[ara_attribute_name])
      on update cascade on delete cascade,

      [ara_abstract_alternate_name] nvarchar(25) collate Latin1_General_100_BIN2 null
    );

   exec sys.sp_MS_marksystemobject N'ara_abstract_column_definition';

end;

if object_id(N'[dbo].[ara_attribute_mapping]',N'U') is null begin;

   create table [dbo].[ara_attribute_mapping]
    (
      [ara_entity] nvarchar(25) collate Latin1_General_100_BIN2 not null,
      [ara_attribute_name] nvarchar(53) collate Latin1_General_100_BIN2 not null,

      constraint [fk : ara_attribute_mapping $ ara_attribute_definition]
      foreign key ([ara_entity],[ara_attribute_name])
      references [dbo].[ara_attribute_definition] ([ara_entity],[ara_attribute_name])
      on update cascade on delete cascade,

      [psa_schema] nvarchar(4) collate Latin1_General_100_BIN2,
      [psa_entity] nvarchar(31) collate Latin1_General_100_BIN2,
      [psa_attribute] sysname collate Latin1_General_100_BIN2,

      constraint [fk : ara_attribute_mapping $ psa_attribute_definition]
      foreign key ([psa_schema],[psa_entity],[psa_attribute])
      references [dbo].[psa_attribute_definition] ([psa_schema],[psa_entity],[psa_attribute])
      on update cascade on delete cascade,

      constraint [pk : ara_attribute_mapping]
      primary key clustered ([ara_entity],[ara_attribute_name],[psa_schema],[psa_entity],[psa_attribute])
    );

   exec sys.sp_MS_marksystemobject N'ara_attribute_mapping';

end;</value>
  </data>
  <data name="ARA_LoggingDefinition" xml:space="preserve">
    <value>if object_id(N'[dbo].[ara_batch_control]',N'U') is null begin;

   create table [dbo].[ara_batch_control] 
    (
      [ara_batch_id] uniqueidentifier not null
      constraint [df : dbo.ara_batch_control {Sequential GUID}] default (newsequentialid()),
	   constraint [pk : dbo.ara_batch_control :: ara_batch_id]
      primary key clustered ([ara_batch_id] asc)
      with (fillfactor=80),
	   [ara_batch_ssis_id] bigint not null,
      [ara_package_name] nvarchar(128) null,
	   [ara_batch_start] datetime2(7) not null,
	   [ara_batch_end] datetime2(7) null,
      [ara_batch_completed] as (convert(bit,case when [ara_batch_end] is not null then 1 else 0 end)) persisted not null
    );

   exec sys.sp_MS_marksystemobject 'ara_batch_control';
end;

if object_id(N'[dbo].[ara_start_batch]',N'P') is null begin;

exec sys.sp_executesql N'
create procedure [dbo].[ara_start_batch]
 (
	@ara_batch_ssis_id bigint,
   @ara_package_name nvarchar(128)
 )
as
set nocount on;

insert [dbo].[ara_batch_control]
 (
   [ara_batch_ssis_id],
   [ara_batch_start],
   [ara_package_name]
 )
output
   inserted.[ara_batch_id]
values 
 (
   @ara_batch_ssis_id,
   sysutcdatetime(),
   @ara_package_name
 );

return @@error;'

end;

exec sys.sp_MS_marksystemobject 'ara_start_batch';

grant execute on [dbo].[ara_start_batch] to [ara_etl_manager];

if object_id(N'[dbo].[ara_end_batch]',N'P') is null begin;

exec sys.sp_executesql N'
create procedure [dbo].[ara_end_batch]
 (
	@ara_batch_id uniqueidentifier
 )
as
set nocount on;

update
   [dbo].[ara_batch_control] 
set
   [ara_batch_end]=sysutcdatetime()
where
   [ara_batch_id]=@ara_batch_id;

return @@error;'
end;

exec sys.sp_MS_marksystemobject 'ara_end_batch';

grant execute on [dbo].[ara_end_batch] to [ara_etl_manager];</value>
  </data>
  <data name="ARA_RoleDefinitions" xml:space="preserve">
    <value>--if not exists(select 1 from sys.sysusers where [name]=N'ara_owner') begin;
--   create role [ara_owner] authorization [db_owner];
--end;

if not exists(select 1 from sys.sysusers where [name]=N'ara_etl_manager') begin;
   create role [ara_etl_manager] authorization [db_owner];
end;</value>
  </data>
  <data name="ARA_GetMetadataEntity" xml:space="preserve">
    <value>with [new_model] as
 (
   select
      [ara_entity],
      [ara_entity_description],
      [ara_entity_type],
      [ara_hash_large_objects]
   from
      [master].[dbo].[ara_entity_definition]
 ), [existing_model] as
 (
   select
      o.[name] [ara_entity],
      case when sq.[name] is not null then N'2' else N'1' end [ara_entity_type]
   from
      sys.tables o
      left join
       (
         select
            parsename(o.[name],2) [name]
         from
            sys.tables o
         where
            object_schema_name(o.[object_id])=N'dbo'
            and
            o.[is_ms_shipped]=1
            and
            left(o.[name],4)!=N'ara_'
       ) sq on o.[name]=sq.[name]
   where
      object_schema_name(o.[object_id])=N'dbo'
      and
      o.[is_ms_shipped]=0
 ), [entity_set] as
 (
   select [ara_entity] from [existing_model]
   union
   select [ara_entity] from [new_model]
 )
select
   x.[ara_entity],
   isnull(n.[ara_entity_description],N'') [ara_entity_description],
   coalesce(e.[ara_entity_type],n.[ara_entity_type]) [ara_entity_type],
   coalesce(n.[ara_entity_type],e.[ara_entity_type]) [ara_new_entity_type],
   isnull(n.[ara_hash_large_objects],N'No') [ara_hash_large_objects],
   case when e.[ara_entity] is null
        then convert(bit,1)
        else convert(bit,0)
    end [ara_entity_create],
   case when n.[ara_entity] is null 
        then convert(bit,1)
        else convert(bit,0)
    end [ara_entity_delete]
from
   [entity_set] x
   left join
   [new_model] n on x.[ara_entity]=n.[ara_entity]
   left join
   [existing_model] e on x.[ara_entity]=e.[ara_entity];</value>
  </data>
  <data name="ARA_GetMetadataAttribute" xml:space="preserve">
    <value>with [new_model] as
 (
   select
      a.[ara_entity],
      a.[ara_attribute_name],
      isnull(a.[ara_attribute_referenced_entity],N'') [ara_attribute_referenced_entity],
      isnull(e.[ara_entity_type],N'') [ara_attribute_referenced_entity_type],
      case when a.[ara_attribute_referenced_entity] is null then a.[ara_attribute_datatype] else N'int' end [ara_attribute_datatype],
      isnull(a.[ara_attribute_default],N'') [ara_attribute_default],
      row_number() over(partition by a.[ara_entity] order by a.[ara_attribute_ordinal]) [ara_attribute_ordinal],
      a.[ara_attribute_sort],
      a.[ara_attribute_optional],
      a.[ara_attribute_business_identifier],
      isnull(a.[ara_attribute_description],a.[ara_attribute_name]+N' Description...') [ara_attribute_description]
   from 
      [master].[dbo].[ara_attribute_definition] a
      left join
      [master].[dbo].[ara_entity_definition] e on a.[ara_attribute_referenced_entity]=e.[ara_entity]
 ), [existing_bids] as
 (
   select
      ic.[object_id],
      ic.[column_id],
      ic.[is_descending_key]
   from
      sys.index_columns ic
      inner join
      sys.indexes i on ic.[object_id]=i.[object_id]
                   and ic.[index_id]=i.[index_id]
      inner join
      sys.columns c on ic.[object_id]=c.[object_id]
                   and ic.[column_id]=c.[column_id]
      inner join
      sys.tables t on c.[object_id]=t.[object_id]
   where
      i.[is_unique]=1
      and
      ic.[is_included_column]=0
      and
      left(i.[name],4)=N'ak :'
      and
      left(c.[name],4)!=N'ara_'
      and
      t.[is_ms_shipped]=0
 ), [existing_pks] as
 (
   select
      ic.[object_id],
      ic.[column_id]
   from
      sys.index_columns ic
      inner join
      sys.indexes i on ic.[object_id]=i.[object_id]
                     and ic.[index_id]=i.[index_id]
      inner join
      sys.columns c on ic.[object_id]=c.[object_id]
                     and ic.[column_id]=c.[column_id]
      inner join
      sys.tables t on c.[object_id]=t.[object_id]
   where
      i.[is_primary_key]=1
      and
      ic.[is_included_column]=0
      and
      left(c.[name],4)!=N'ara_'
      and
      t.[is_ms_shipped]=0
 ), [existing_refs] as
 (
   select
      fkc.[parent_object_id] [object_id],
      fkc.[parent_column_id] [column_id],
      replace(object_name(fkc.[referenced_object_id]),N'.Keystore','') [ara_attribute_referenced_entity]
   from
      sys.foreign_key_columns fkc
 ), [existing_model] as
 (
   select
      o.[name] [ara_entity],
      c.[name] [ara_attribute_name],
      isnull(er.[ara_attribute_referenced_entity],N'') [ara_attribute_referenced_entity],
      case y.[name]
         when N'char' then y.[name]+N'('+convert(nvarchar(10),c.[max_length])+N')'
         when N'nchar' then y.[name]+N'('+convert(nvarchar(10),c.[max_length]/2)+N')'
         when N'varchar' then y.[name]+N'('+ isnull(nullif(convert(nvarchar(10),c.[max_length]),N'-1'),N'max') +N')'
         when N'nvarchar' then y.[name]+N'('+ isnull(nullif(convert(nvarchar(10),c.[max_length]/2),N'-1'),N'max') +N')'
         when N'binary' then y.[name]+N'('+isnull(nullif(convert(nvarchar(10),c.[max_length]),N'-1'),N'max')+N')'
         when N'varbinary' then y.[name]+N'('+isnull(nullif(convert(nvarchar(10),c.[max_length]),N'-1'),N'max')+N')'
         when N'datetime2' then y.[name]+N'('+convert(nvarchar(10),c.[scale])+N')'
         when N'decimal' then y.[name]+N'('+convert(nvarchar(10),c.[precision])+N','+convert(nvarchar(10),c.[scale])+N')'
         when N'numeric' then y.[name]+N'('+convert(nvarchar(10),c.[precision])+N','+convert(nvarchar(10),c.[scale])+N')'
         else y.[name]
       end [ara_attribute_datatype],
      isnull(df.[definition],N'') [ara_attribute_default],
      row_number() over(partition by o.[name] order by c.[column_id]) [ara_attribute_ordinal],
      case when sq.[is_descending_key]=1 then 'desc' else N'asc' end [ara_attribute_sort],
      case c.[is_nullable] when 1 then N'Yes' else N'No' end [ara_attribute_optional],
      case when sq.[column_id] is not null then N'Yes' else N'No' end [ara_attribute_business_identifier]
   from
      sys.tables o
      inner join
      sys.columns c on o.[object_id]=c.[object_id] and left(c.[name],4)!=N'ara_'
      inner join
      sys.types y on c.[user_type_id]=y.[user_type_id] 
      left join
      sys.default_constraints df on c.[object_id]=df.[parent_object_id]
                                and c.[column_id]=df.[parent_column_id]
      left join
      [existing_bids] sq on c.[object_id]=sq.[object_id]
                        and c.[column_id]=sq.[column_id]
      left join
      [existing_pks] epk on c.[object_id]=epk.[object_id]
                        and c.[column_id]=epk.[column_id]
      left join
      [existing_refs] er on c.[object_id]=er.[object_id]
                        and c.[column_id]=er.[column_id]
   where
      object_schema_name(o.[object_id])=N'dbo'
      and
      o.[is_ms_shipped]=0 -- i dont want system objects
      and
      epk.[column_id] is null -- i dont want the surrogate keys
 ), [keyset] as
 (
   select [ara_entity],[ara_attribute_name] from [new_model]
   union
   select [ara_entity],[ara_attribute_name] from [existing_model]
 )
select
   ks.[ara_entity],
   ks.[ara_attribute_name],
   isnull(nm.[ara_attribute_referenced_entity],N'') [ara_attribute_referenced_entity],
   isnull(nm.[ara_attribute_referenced_entity_type],N'') [ara_attribute_referenced_entity_type],
   isnull(nm.[ara_attribute_datatype],N'') [ara_attribute_datatype],
   isnull(nm.[ara_attribute_default],N'') [ara_attribute_default],
   isnull(nm.[ara_attribute_ordinal],0) [ara_attribute_ordinal],
   isnull(nm.[ara_attribute_sort],N'') [ara_attribute_sort],
   isnull(nm.[ara_attribute_optional],N'') [ara_attribute_optional],
   isnull(nm.[ara_attribute_business_identifier],N'') [ara_attribute_business_identifier],
   isnull(nm.[ara_attribute_description],N'') [ara_attribute_description],
   case when em.[ara_entity] is null
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_add_column],
   case when nm.[ara_entity] is null 
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_delete_column],
   case when em.[ara_entity] is null or nm.[ara_entity] is null 
        then convert(bit,0)
        when em.[ara_attribute_datatype]!=nm.[ara_attribute_datatype] or em.[ara_attribute_optional]!=nm.[ara_attribute_optional]
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_column],
   case when em.[ara_entity] is null or nm.[ara_entity] is null 
        then convert(bit,0)
        when em.[ara_attribute_datatype]!=nm.[ara_attribute_datatype]
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_datatype],
   case when em.[ara_entity] is null or nm.[ara_entity] is null 
        then convert(bit,0)
        when em.[ara_attribute_optional]!=nm.[ara_attribute_optional]
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_optionality],
   case when em.[ara_entity] is null or nm.[ara_entity] is null 
        then convert(bit,0)
        when isnull(em.[ara_attribute_referenced_entity],N'')!=isnull(nm.[ara_attribute_referenced_entity],N'')
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_foreign_key],
   case when em.[ara_entity] is null or nm.[ara_entity] is null 
        then convert(bit,0)
        when isnull(em.[ara_attribute_default],N'')!=isnull(nm.[ara_attribute_default],N'')
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_default],
   case when em.[ara_entity] is null and nm.[ara_attribute_business_identifier]=N'Yes'
        then convert(bit,1)
        when em.[ara_attribute_business_identifier]=N'Yes' and nm.[ara_entity] is null 
        then convert(bit,1)
        when em.[ara_attribute_business_identifier]!=nm.[ara_attribute_business_identifier]
        then convert(bit,1)
        when nm.[ara_attribute_business_identifier]=N'Yes' and em.[ara_attribute_sort]!=nm.[ara_attribute_sort]
        then convert(bit,1)
        when nm.[ara_attribute_business_identifier]=N'Yes' and em.[ara_attribute_datatype]!=nm.[ara_attribute_datatype]
        then convert(bit,1)
        when nm.[ara_attribute_business_identifier]=N'Yes' and em.[ara_attribute_optional]!=nm.[ara_attribute_optional]
        then convert(bit,1)
        else convert(bit,0)
    end [ara_attribute_alter_alternate_key]
from
   [keyset] ks
   left join
   [new_model] nm on ks.[ara_entity]=nm.[ara_entity]
                 and ks.[ara_attribute_name]=nm.[ara_attribute_name]
   left join
   [existing_model] em on ks.[ara_entity]=em.[ara_entity]
                      and ks.[ara_attribute_name]=em.[ara_attribute_name]
order by
   ks.[ara_entity],isnull(nm.[ara_attribute_ordinal],9999);</value>
  </data>
  <data name="ARA_AddColumnDefinitionTypeI" xml:space="preserve">
    <value>if not exists(select N'?' from sys.columns where object_name([object_id])=N'{{{entity}}}' and [name]=N'{{{name}}}') begin;
   alter table [dbo].[{{{entity}}}] add {{{column name}}} {{{datatype}}} {{{optionality}}}{{{default clause}}};
end;</value>
  </data>
  <data name="ARA_AddColumnDefinitionTypeII" xml:space="preserve">
    <value>if not exists(select N'?' from sys.columns where object_name([object_id])=N'{{{entity}}}.Keystore' and [name]=N'{{{name}}}') begin;
   alter table [dbo].[{{{entity}}}.Keystore] add {{{column name}}} {{{datatype}}} {{{optionality}}};
end;
if not exists(select N'?' from sys.columns where object_name([object_id])=N'{{{entity}}}' and [name]=N'{{{name}}}') begin;
   alter table [dbo].[{{{entity}}}] add {{{column name}}} {{{datatype}}} {{{optionality}}};
end;</value>
  </data>
  <data name="ARA_AlterColumnDefinitionTypeI" xml:space="preserve">
    <value>alter table [dbo].[{{{entity}}}] alter column {{{column name}}} {{{datatype}}}{{{default}}}{{{optionality}}};</value>
  </data>
  <data name="ARA_AlterColumnDefinitionTypeII" xml:space="preserve">
    <value>if not exists(select N'?' from sys.columns where object_name([object_id])=N'{{{entity}}}.Keystore' and [name]=N'{{{name}}}') begin;
   alter table [dbo].[{{{entity}}}.Keystore] alter column {{{column name}}} {{{datatype}}}{{{default}}}{{{optionality}}};
end;
if not exists(select N'?' from sys.columns where object_name([object_id])=N'{{{entity}}}' and [name]=N'{{{name}}}') begin;
   alter table [dbo].[{{{entity}}}] alter column {{{column name}}} {{{datatype}}}{{{default}}}{{{optionality}}};
end;</value>
  </data>
  <data name="ARA_CreateAlternateKeyDefinitionTypeII" xml:space="preserve">
    <value>create unique nonclustered index [ak : {{{entity}}}.Keystore] on [dbo].[{{{entity}}}.Keystore]
 (
{{{alternate key index column set}}}
 )
with (fillfactor=80,data_compression=page);

create unique nonclustered index [ak : {{{entity}}}] on [dbo].[{{{entity}}}]
 (
{{{alternate key index column set 2}}}
   [ara_member_sequence] desc
 )
with (fillfactor=80,data_compression=page);</value>
  </data>
  <data name="ARA_DropAlternateKeyDefinition" xml:space="preserve">
    <value>if exists(select N'?' from sys.indexes where [name]=N'ak : {{{entity}}}.Keystore' and object_name([object_id])=N'{{{entity}}}.Keystore') begin;
   drop index [ak : {{{entity}}}.Keystore] on [dbo].[{{{entity}}}.Keystore];
end;
if exists(select N'?' from sys.indexes where [name]=N'ak : {{{entity}}}' and object_name([object_id])=N'{{{entity}}}') begin;
   drop index [ak : {{{entity}}}] on [dbo].[{{{entity}}}];
end;</value>
  </data>
  <data name="ARA_DropColumnDefinition" xml:space="preserve">
    <value>if exists(select N'?' from sys.columns where [name]=N'{{{attribute name}}}' and [object_id]=object_id(N'[dbo].[{{{entity}}}.Keystore]')) begin;
   alter table [dbo].[{{{entity}}}.Keystore] drop column {{{column name}}};
end;
if exists(select N'?' from sys.columns where [name]=N'{{{attribute name}}}' and [object_id]=object_id(N'[dbo].[{{{entity}}}]')) begin;
   alter table [dbo].[{{{entity}}}] drop column {{{column name}}};
end;</value>
  </data>
  <data name="ARA_EntityDefinitionTypeII" xml:space="preserve">
    <value>if object_id(N'[dbo].[{{{entity}}}.SPK]',N'SO') is null begin;

   create sequence [dbo].[{{{entity}}}.SPK] as int
      start with 1
      increment by 1
      minvalue 1
      maxvalue 2000000000
      cycle
      cache 100;

end;

if object_id(N'[dbo].[{{{entity}}}.Keystore]',N'U') is null begin;

   create table [dbo].[{{{entity}}}.Keystore]
    (
      [{{{entity}}}Key] int not null

      -- call the sequence
      constraint [df : {{{entity}}}.Keystore :: {{{entity}}}Key]
      default next value for [dbo].[{{{entity}}}.SPK],   

      -- define primary key
      constraint [pk : {{{entity}}}.Keystore] 
      primary key clustered ([{{{entity}}}Key])
      with (fillfactor=100,data_compression=page), 

      -- define the alternate key
{{{alternate key table column set}}}

      -- define the metadata
      [ara_create_timestamp] datetime2(7) not null,
      [ara_member_inferred] bit not null,
      [ara_member_metadata] sql_variant null
    );

   create statistics [st : {{{entity}}}.Keystore :: ara_create_timestamp] on [dbo].[{{{entity}}}.Keystore] ([ara_create_timestamp]);   
   create statistics [st : {{{entity}}}.Keystore :: ara_member_inferred] on [dbo].[{{{entity}}}.Keystore] ([ara_member_inferred]);  
   create statistics [st : {{{entity}}}.Keystore :: ara_member_metadata] on [dbo].[{{{entity}}}.Keystore] ([ara_member_metadata]);  

end;

exec sys.sp_MS_marksystemobject N'[{{{entity}}}.Keystore]';

if object_id(N'[dbo].[{{{entity}}}]',N'U') is null begin;

   create table [dbo].[{{{entity}}}]
    (
      -- define the surrogate key
      [{{{entity}}}Key] int not null,
      [ara_member_sequence] int not null,

      -- define the alternate key
{{{alternate key table column set}}}

      -- define the metadata
      [ara_start_period] datetime2(7) not null,
      [ara_end_period] datetime2(7) null,
      [ara_active_state] bit not null,
      [ara_dml_action] as case when [ara_end_period] is null then N'I' when [ara_active_state]=0 then N'D' else N'U' end persisted not null,
      [ara_current_flag]  AS convert(bit,case when [ara_end_period] is null then 1 else 0 end) persisted not null,
      [ara_batch_id] uniqueidentifier null,
      [ara_hash_id] varbinary(20) not null,

      -- attributes
{{{atomic table column set}}}

      -- add primary key constraint
      constraint [pk : {{{entity}}}]
      primary key clustered ([{{{entity}}}Key] asc,[ara_member_sequence] desc)
      with (fillfactor=100,data_compression=page),

      -- relation to keystore
      constraint [fk : {{{entity}}} $ dbo.{{{entity}}}.Keystore]
      foreign key ([{{{entity}}}Key])
      references [dbo].[{{{entity}}}.Keystore] ([{{{entity}}}Key])
    );

   create statistics [st : {{{entity}}} :: ara_member_sequence] on [dbo].[{{{entity}}}] ([ara_member_sequence]);
   create statistics [st : {{{entity}}} :: ara_start_period] on [dbo].[{{{entity}}}] ([ara_start_period]);
   create statistics [st : {{{entity}}} :: ara_end_period] on [dbo].[{{{entity}}}] ([ara_end_period]);
   create statistics [st : {{{entity}}} :: ara_active_state] on [dbo].[{{{entity}}}] ([ara_active_state]);
   create statistics [st : {{{entity}}} :: ara_dml_action] on [dbo].[{{{entity}}}] ([ara_dml_action]);
   create statistics [st : {{{entity}}} :: ara_current_flag] on [dbo].[{{{entity}}}] ([ara_current_flag]);
   create statistics [st : {{{entity}}} :: ara_batch_id] on [dbo].[{{{entity}}}] ([ara_batch_id]);
   create statistics [st : {{{entity}}} :: ara_hash_id] on [dbo].[{{{entity}}}] ([ara_hash_id]);

end;</value>
  </data>
  <data name="ARA_EntityDefinitionTypeI" xml:space="preserve">
    <value>if object_id(N'[dbo].[{{{entity}}}.SPK]',N'SO') is null begin;

   create sequence [dbo].[{{{entity}}}.SPK] as int
      start with 1
      increment by 1
      minvalue 1
      maxvalue 2000000000
      cycle
      cache 100;

end;

if object_id(N'[dbo].[{{{entity}}}]',N'U') is null begin;

   create table [dbo].[{{{entity}}}]
    (
      -- define the surrogate key
      [{{{entity}}}Key] int not null

      -- call the sequence
      constraint [df : {{{entity}}} :: {{{entity}}}Key]
      default next value for [dbo].[{{{entity}}}.SPK],

      -- define the alternate key
{{{alternate key table column set}}}

      -- define the metadata
      [ara_start_period] datetime2(7) not null,
      [ara_modify_period] datetime2(7) null,
      [ara_active_state] bit not null,
      [ara_dml_action] as case when [ara_modify_period] is null then N'I' when [ara_active_state]=0 then N'D' else N'U' end persisted not null,
      [ara_batch_id] uniqueidentifier null,
      [ara_hash_id] varbinary(20) not null,

      -- attributes
{{{atomic table column set}}}

      -- add primary key constraint
      constraint [pk : {{{entity}}}]
      primary key clustered ([{{{entity}}}Key] asc)
      with (fillfactor=100,data_compression=page)
    );

   create statistics [st : {{{entity}}} :: ara_start_period] on [dbo].[{{{entity}}}] ([ara_start_period]);
   create statistics [st : {{{entity}}} :: ara_modify_period] on [dbo].[{{{entity}}}] ([ara_modify_period]);
   create statistics [st : {{{entity}}} :: ara_active_state] on [dbo].[{{{entity}}}] ([ara_active_state]);
   create statistics [st : {{{entity}}} :: ara_dml_action] on [dbo].[{{{entity}}}] ([ara_dml_action]);
   create statistics [st : {{{entity}}} :: ara_batch_id] on [dbo].[{{{entity}}}] ([ara_batch_id]);
   create statistics [st : {{{entity}}} :: ara_hash_id] on [dbo].[{{{entity}}}] ([ara_hash_id]);

   grant select on [dbo].[{{{entity}}}] to [ara_etl_manager];

end;</value>
  </data>
  <data name="ARA_DeleteEntityDefinition" xml:space="preserve">
    <value>declare @drop_constraints nvarchar(max);

while 1!=2 begin;

   select top 1
      @drop_constraints=N'alter table [dbo].['+object_name(fk.[parent_object_id])+N'] drop constraint ['+fk.[name]+N'];'
   from
      sys.foreign_keys fk
      inner join
      sys.tables t on fk.[parent_object_id]=t.[object_id]
   where
      object_name(fk.[referenced_object_id])=N'{{{entity}}}' 
      or 
      object_name(fk.[referenced_object_id])=N'{{{entity}}}.Keystore'

    if @@rowcount = 0 break;

    exec sys.sp_executesql @drop_constraints;  
end;

if object_id(N'[dbo].[{{{entity}}}]',N'U') is not null drop table [dbo].[{{{entity}}}];
if object_id(N'[dbo].[{{{entity}}}.Keystore]',N'U') is not null drop table [dbo].[{{{entity}}}.Keystore];</value>
  </data>
  <data name="SYS_LocalMethodInstall" xml:space="preserve">
    <value>if not exists(select N'?' from sys.assemblies where [name]=N'Slalom.Framework.Methods')
create assembly [Slalom.Framework.Methods]
from 0x
with permission_set = safe;</value>
  </data>
  <data name="ARA_ConstraintForeignKeyDefinition" xml:space="preserve">
    <value>if col_length('[dbo].[{{{entity}}}]','{{{column name}}}') is not null and object_id(N'[dbo].[fk : {{{entity}}} $ {{{referenced entity}}}{{{referenced entity type}}}{{{role}}}]',N'F') is null begin;
   alter table [dbo].[{{{entity}}}] with check add constraint [fk : {{{entity}}} $ {{{referenced entity}}}{{{referenced entity type}}}{{{role}}}] 
   foreign key([{{{column name}}}]) references [dbo].[{{{referenced entity}}}{{{referenced entity type}}}] ([{{{referenced entity}}}Key]);
end;
if col_length('[dbo].[{{{entity}}}.Keystore]','{{{column name}}}') is not null and object_id(N'[dbo].[fk : {{{entity}}}.Keystore $ {{{referenced entity}}}{{{referenced entity type}}}{{{role}}}]',N'F') is null begin;
   alter table [dbo].[{{{entity}}}.Keystore] with check add constraint [fk : {{{entity}}}.Keystore $ {{{referenced entity}}}{{{referenced entity type}}}{{{role}}}] 
   foreign key([{{{column name}}}]) references [dbo].[{{{referenced entity}}}{{{referenced entity type}}}] ([{{{referenced entity}}}Key]);
end;</value>
  </data>
  <data name="ARA_CreateAlternateKeyDefinitionTypeI" xml:space="preserve">
    <value>create unique nonclustered index [ak : {{{entity}}}] on [dbo].[{{{entity}}}]
 (
{{{alternate key index column set}}}
 )
with (fillfactor=80,data_compression=page);</value>
  </data>
  <data name="ARA_DropColumnConstraints" xml:space="preserve">
    <value>while 1!=2 begin;

   select top 1
      @drop_constraints=N'alter table [dbo].['+object_name(fk.[parent_object_id])+N'] drop constraint ['+fk.[name]+N'];'
   from
      sys.foreign_key_columns fkc
      inner join
      sys.foreign_keys fk on fkc.[constraint_object_id]=fk.[object_id]
      inner join
      sys.columns c on fkc.[parent_object_id]=c.[object_id] and fkc.[parent_column_id]=c.[column_id]
   where
      (object_name(fk.[parent_object_id])=N'{{{entity}}}' or object_name(fk.[parent_object_id])=N'{{{entity}}}.Keystore')
      and
      c.[name]=N'{{{attribute name}}}';

    if @@rowcount = 0 break;

    exec sys.sp_executesql @drop_constraints;  
end;
while 1!=2 begin;

   select top 1
      @drop_constraints=N'alter table [dbo].['+object_name(dc.[parent_object_id])+N'] drop constraint ['+dc.[name]+N'];'
   from
      sys.default_constraints dc
      inner join
      sys.columns c on dc.[parent_object_id]=c.[object_id] and dc.[parent_column_id]=c.[column_id]
   where
      (object_name(dc.[parent_object_id])=N'{{{entity}}}' or object_name(dc.[parent_object_id])=N'{{{entity}}}.Keystore')
      and
      c.[name]=N'{{{attribute name}}}';

    if @@rowcount = 0 break;

    exec sys.sp_executesql @drop_constraints;  
end;
while 1!=2 begin;
   select --top 1
      @drop_constraints=N'drop statistics [dbo].['+object_name(fk.[object_id])+N'].['+fk.[name]+N'];'
   from
      sys.stats_columns fkc
      inner join
      sys.stats fk on fkc.[stats_id]=fk.[stats_id]
      inner join
      sys.columns c on fkc.[object_id]=c.[object_id] and fkc.[column_id]=c.[column_id]
   where
      fk.[user_created]=1
      and
      (object_name(fk.[object_id])=N'{{{entity}}}' or object_name(fk.[object_id])=N'{{{entity}}}.Keystore')
      and
      c.[name]=N'{{{attribute name}}}';

    if @@rowcount = 0 break;

    exec sys.sp_executesql @drop_constraints;  

end;</value>
  </data>
  <data name="ARA_ModelGet" xml:space="preserve">
    <value>with [entity] ([entities]) as
 (
   select
      N'[dbo].['+[ara_entity]+N']' [@domain],
      [ara_entity],
      replace([ara_entity_description],N'''',N'|~~|') [ara_entity_description],
      [ara_entity_type],
      [ara_hash_large_objects],
      convert(xml,sq.[attribute]) [attributes]
   from
      [master].[dbo].[ara_entity_definition] e
      cross apply
       (
         select
            [ara_attribute],
            [ara_attribute_referenced_entity],
            [ara_attribute_referenced_entity_role],
            [ara_attribute_name],
            [ara_attribute_datatype],
            [ara_attribute_ordinal],
            [ara_attribute_sort],
            [ara_attribute_optional],
            [ara_attribute_business_identifier],
            replace([ara_attribute_description],N'''',N'|~~|') [ara_attribute_description],
            replace([ara_attribute_default],N'''',N'|~~|') [ara_attribute_default]
         from
            [dbo].[ara_attribute_definition] a
         where
            e.[ara_entity]=a.[ara_entity]
         for xml path('attribute')
       ) sq(attribute)
   for xml path('entity') 
 ), [abstract] ([abstracts]) as
 (
   select
      [@ara_domain],
      [ara_abstract_security_group],
      [ara_abstract_name],
      [ara_entity],
      [ara_abstract_description] [ara_abstract_description],
      [ara_abstract_predicate],
      [columns]
   from
    (
      select
         N'['+lower([ara_abstract_security_group])+'].['+[ara_abstract_name]+N']' [@ara_domain],
         [ara_abstract_security_group],
         [ara_abstract_name],
         [ara_entity],
         replace([ara_abstract_description],N'''',N'|~~|') [ara_abstract_description],
         replace([ara_abstract_predicate],N'''',N'|~~|') [ara_abstract_predicate],
         convert(xml,sq.[attribute]) [columns]
      from
         [master].[dbo].[ara_abstract_definition] e
         cross apply
          (
            select
               [ara_attribute_name],
               [ara_abstract_alternate_name]
            from
               [dbo].[ara_abstract_column_definition] a
            where
               e.[ara_abstract_security_group]=a.[ara_abstract_security_group]
               and
               e.[ara_abstract_name]=a.[ara_abstract_name]
            for xml path('column')
          ) sq(attribute)
    ) ab
   for xml path('abstract')
 ), [mapping] ([mappings]) as
 (
   select
      N'[dbo].['+[ara_entity]+N'].['+[ara_attribute_name]+N']' [@ara_qualifier],
      N'['+[psa_schema]+N'].['+[psa_entity]+N'].['+[psa_attribute]+N']' [@psa_qualifier],
      [ara_entity],
      [ara_attribute_name],
      [psa_schema],
      [psa_entity],
      [psa_attribute]
   from
      [master].[dbo].[ara_attribute_mapping] e
   for xml path('mapping')
 )
select
   convert(xml,N'&lt;model&gt;&lt;entities&gt;'+isnull((select [entities] from [entity]),N'')+N'&lt;/entities&gt;'+
               N'&lt;abstracts&gt;'+isnull((select [abstracts] from [abstract]),N'')+N'&lt;/abstracts&gt;'+
               N'&lt;mappings&gt;'+isnull((select [mappings] from [mapping]),N'')+N'&lt;/mappings&gt;&lt;/model&gt;') [ara_model];</value>
  </data>
  <data name="ARA_ModelSet" xml:space="preserve">
    <value>set nocount on;
declare @xml xml='{{{xml}}}';

begin try;

   delete [master].[dbo].[ara_attribute_mapping];
   delete [master].[dbo].[ara_abstract_column_definition];
   delete [master].[dbo].[ara_abstract_definition];
   delete [master].[dbo].[ara_attribute_definition];
   delete [master].[dbo].[ara_entity_definition];

   insert [master].[dbo].[ara_entity_definition]
    (
      [ara_entity],
      [ara_entity_description],
      [ara_entity_type],
      [ara_hash_large_objects]
    )
   select
      x.e.value('./ara_entity[1]',N'nvarchar(25)') [ara_entity],
      replace(x.e.value('./ara_entity_description[1]',N'nvarchar(4000)'),N'|~~|','''') [ara_entity_description],
      x.e.value('./ara_entity_type[1]',N'nvarchar(1)') [ara_entity_type],
      x.e.value('./ara_hash_large_objects[1]',N'nvarchar(3)') [ara_hash_large_objects]
   from
      @xml.nodes('/model/entities/entity') x(e);

   insert [master].[dbo].[ara_attribute_definition]
    (
      [ara_entity],
      [ara_attribute],
      [ara_attribute_referenced_entity],
      [ara_attribute_referenced_entity_role],
      [ara_attribute_datatype],
      [ara_attribute_ordinal],
      [ara_attribute_sort],
      [ara_attribute_optional],
      [ara_attribute_business_identifier],
      [ara_attribute_description],
      [ara_attribute_default]
    )
   select
      p.e.value('./ara_entity[1]',N'nvarchar(25)') [ara_entity],
      c.a.value('./ara_attribute[1]',N'nvarchar(25)') [ara_attribute],
      c.a.value('./ara_attribute_referenced_entity[1]',N'nvarchar(25)') [ara_attribute_referenced_entity],
      c.a.value('./ara_attribute_referenced_entity_role[1]',N'nvarchar(25)') [ara_attribute_referenced_entity_role],
      c.a.value('./ara_attribute_datatype[1]',N'sysname') [ara_attribute_datatype],
      c.a.value('./ara_attribute_ordinal[1]',N'int') [ara_attribute_ordinal],
      c.a.value('./ara_attribute_sort[1]',N'nvarchar(4)') [ara_attribute_sort],
      c.a.value('./ara_attribute_optional[1]',N'nvarchar(3)') [ara_attribute_optional],
      c.a.value('./ara_attribute_business_identifier[1]',N'nvarchar(3)') [ara_attribute_business_identifier],
      replace(c.a.value('./ara_attribute_description[1]',N'nvarchar(4000)'),N'|~~|','''') [ara_attribute_description],
      replace(c.a.value('./ara_attribute_default[1]',N'nvarchar(max)'),N'|~~|','''') [ara_attribute_default]
   from
      @xml.nodes('/model/entities/entity') p(e)
      cross apply
      p.e.nodes('./attributes/attribute') c(a);

   insert [master].[dbo].[ara_abstract_definition]
    (
      [ara_abstract_security_group],
      [ara_abstract_name],
      [ara_entity],
      [ara_abstract_description],
      [ara_abstract_predicate]
    )
   select
      x.e.value('./ara_abstract_security_group[1]',N'nvarchar(10)') [ara_abstract_security_group],
      x.e.value('./ara_abstract_name[1]',N'nvarchar(25)') [ara_abstract_name],
      x.e.value('./ara_entity[1]',N'nvarchar(25)') [ara_entity],
      replace(x.e.value('./ara_abstract_description[1]',N'nvarchar(4000)'),N'|~~|','''') [ara_abstract_description],
      replace(x.e.value('./ara_abstract_predicate[1]',N'nvarchar(max)'),N'|~~|','''') [ara_abstract_predicate]
   from
      @xml.nodes('/model/abstracts/abstract') x(e);

   insert [master].[dbo].[ara_abstract_column_definition]
    (
      [ara_abstract_security_group],
      [ara_abstract_name],
      [ara_attribute_name],
      [ara_entity],
      [ara_abstract_alternate_name]
    )
   select
      p.e.value('./ara_abstract_security_group[1]',N'nvarchar(10)') [ara_abstract_security_group],
      p.e.value('./ara_abstract_name[1]',N'nvarchar(25)') [ara_abstract_name],
      c.a.value('./ara_attribute_name[1]',N'nvarchar(53)') [ara_attribute_name],
      p.e.value('./ara_entity[1]',N'nvarchar(25)') [ara_entity],
      c.a.value('./ara_abstract_alternate_name[1]',N'nvarchar(128)') [ara_abstract_alternate_name]
   from
      @xml.nodes('/model/abstracts/abstract') p(e)
      cross apply
      p.e.nodes('./columns/column') c(a);

   insert [master].[dbo].[ara_attribute_mapping]
    ( 
      [ara_entity],
      [ara_attribute_name],
      [psa_schema],
      [psa_entity],
      [psa_attribute]
    )
   select
      x.e.value('./ara_entity[1]',N'nvarchar(25)') [ara_entity],
      x.e.value('./ara_attribute_name[1]',N'nvarchar(53)') [ara_attribute_name],
      x.e.value('./psa_schema[1]',N'nvarchar(4)') [psa_schema],
      x.e.value('./psa_entity[1]',N'nvarchar(31)') [psa_entity],
      x.e.value('./psa_attribute[1]',N'sysname') [psa_attribute]
   from
      @xml.nodes('/model/mappings/mapping') x(e);

end try begin catch;

      declare @ErrorMessage nvarchar(4000)=error_message();
      declare @ErrorSeverity int=error_severity();
      declare @ErrorState int=error_state();
      raiserror(@ErrorMessage,@ErrorSeverity,@ErrorState) with log;

end catch;</value>
  </data>
  <data name="ARA_ControlCreateDefinitionTypeI" xml:space="preserve">
    <value>create view [dbo].[{{{entity}}}.Control] with schemabinding
-- EDW Framework - Analytics &amp; Reporting Area ('ARA') Definition
-- Slalom Consulting | Copyright © 2015 | www.slalom.com
-- Do NOT alter/add/extend this view
as
select 
{{{column set}}}
from
   [dbo].[{{{entity}}}];</value>
  </data>
  <data name="ARA_ControlCreateDefinitionTypeII" xml:space="preserve">
    <value>create view [dbo].[{{{entity}}}.Control] with schemabinding
as
select 
{{{column set}}}
from
   [dbo].[{{{entity}}}]
where
   [ara_current_flag]=1;</value>
  </data>
  <data name="ARA_ControlDeleteDefinitionTypeI" xml:space="preserve">
    <value>create trigger [dbo].[tr : dbo.{{{entity}}}.Control !! delete] on [dbo].[{{{entity}}}.Control]
instead of delete
-- EDW Framework - Analytics &amp; Reporting Area ('ARA') Definition
-- Slalom Consulting | Copyright © 2015 | www.slalom.com
-- Do NOT alter/add/extend this instead-of trigger
as
begin;

   set nocount on;

   declare @k smallint=4;
   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=try_convert(uniqueidentifier,context_info());

   with [delete_source] as
    (
      select
{{{column set}}}
         @batch [ara_batch_id]
      from
         [deleted] i
    )
   update
      [dbo].[{{{entity}}}]
   set
      [ara_modify_period]=@ts,
      [ara_active_state]=0,
      [ara_batch_id]=s.[ara_batch_id],
      [ara_hash_id]=0x
   from
      [dbo].[{{{entity}}}] t
      inner join
      [delete_source] s on @k=@k
{{{join set}}}
                       and t.[ara_active_state]=1;           

end;</value>
  </data>
  <data name="ARA_ControlDeleteDefinitionTypeII" xml:space="preserve">
    <value>--&gt;</value>
  </data>
  <data name="ARA_ControlDropDefinition" xml:space="preserve">
    <value>if object_id(N'[dbo].[{{{entity}}}.Control]',N'V') is not null drop view [dbo].[{{{entity}}}.Control];</value>
  </data>
  <data name="ARA_ControlInsertDefinitionTypeI" xml:space="preserve">
    <value>create trigger [dbo].[tr : dbo.{{{entity}}}.Control !! insert] on [dbo].[{{{entity}}}.Control]
instead of insert
-- EDW Framework - Analytics &amp; Reporting Area ('ARA') Definition
-- Slalom Consulting | Copyright © 2015 | www.slalom.com
-- Do NOT alter/add/extend this instead-of trigger
as
begin;

   set nocount on;
   
   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=try_convert(uniqueidentifier,context_info());

   insert [dbo].[{{{entity}}}]
    (
{{{column set}}}
      [ara_start_period],
      [ara_modify_period],
      [ara_active_state],
      [ara_batch_id],
      [ara_hash_id]
    )
   select
{{{column set}}}
      @ts,
      null,
      1,
      @batch,
      {{{hash prefix}}}(select {{{hash list}}}N'Slalom.Framework' [HA] for xml raw, binary base64))
   from
      [inserted] i;

end;</value>
  </data>
  <data name="ARA_ControlInsertDefinitionTypeII" xml:space="preserve">
    <value>--&gt;</value>
  </data>
  <data name="ARA_ControlUpdateDefinitionTypeI" xml:space="preserve">
    <value>create trigger [dbo].[tr : dbo.{{{entity}}}.Control !! update] on [dbo].[{{{entity}}}.Control]
instead of update
-- EDW Framework - Analytics &amp; Reporting Area ('ARA') Definition
-- Slalom Consulting | Copyright © 2015 | www.slalom.com
-- Do NOT alter/add/extend this instead-of trigger
as
begin;

   set nocount on;
   
   declare @k smallint=2;
   declare @ts datetime2(7)=sysutcdatetime();
   declare @batch uniqueidentifier=try_convert(uniqueidentifier,context_info());
   declare @bs nvarchar(36)=convert(nvarchar(36),@batch);
   declare @dbname sysname=db_name();
   declare @method sysname=object_name(@@procid);
   declare @errmsg nvarchar(1000)=N'A [business identifier | alternate key] cannot be updated; '
   select @errmsg+=N'Batch:={%s}; '
   select @errmsg+=N'Entity:=[%s].[%s].[%s]; '
   select @errmsg+=N'Control:=[dbo].[{{{entity}}}.Control]; ' 
   select @errmsg+=N'Method:=[%s];' 

{{{key update check}}}
   with [update_source] as
    (
      select
{{{column set}}}
         {{{hash prefix}}}(select {{{hash set}}}N'Slalom.Framework' [HA] for xml raw, binary base64)) [ara_hash_id]
      from
         [inserted] s
    )
   update
      [dbo].[{{{entity}}}]
   set
{{{set set}}}
      [ara_modify_period]=@ts,
      [ara_active_state]=1,
      [ara_batch_id]=@batch,
      [ara_hash_id]=s.[ara_hash_id]
   from
      [dbo].[{{{entity}}}] t
      inner join
      [update_source] s on @k=@k
{{{join set}}}
                       and t.[ara_hash_id]!=s.[ara_hash_id];

end;</value>
  </data>
  <data name="ARA_ControlUpdateDefinitionTypeII" xml:space="preserve">
    <value>--&gt;</value>
  </data>
  <data name="ARA_ControlUpdateInvalidation" xml:space="preserve">
    <value>   if update({{{column name}}}) begin;
      raiserror(@errmsg,16,1,@bs,@dbname,N'dbo',N'{{{entity}}}',@method) with log;
   end;</value>
  </data>
  <data name="ARA_Audit" xml:space="preserve">
    <value>if not exists(select N'?' from sys.triggers where name='ara_audit' and [parent_class]=0) begin;

exec sys.sp_executesql N'create trigger [ara_audit] on database for DDL_DATABASE_LEVEL_EVENTS
as
begin;
   set nocount on;

   declare
      @EventData xml=eventdata(),
      @EventType nvarchar(128),
      @HostName nvarchar(128),
      @LoginName nvarchar(128),
      @DatabaseName nvarchar(128),
      @ObjectType nvarchar(128),
      @SchemaName nvarchar(128),
      @ObjectName nvarchar(128),
      @TargetObjectName nvarchar(128),
      @TargetObjectType nvarchar(128);
 
   select
      @EventType=@EventData.value(''(/EVENT_INSTANCE/EventType)[1]'',''nvarchar(128)''),
      @HostName=host_name(),
      @LoginName=@EventData.value(''(/EVENT_INSTANCE/LoginName)[1]'',''nvarchar(128)''),
      @DatabaseName=@EventData.value(''(/EVENT_INSTANCE/DatabaseName)[1]'',''nvarchar(128)''),
      @ObjectType=@EventData.value(''(/EVENT_INSTANCE/ObjectType)[1]'',''nvarchar(128)''),
      @SchemaName=@EventData.value(''(/EVENT_INSTANCE/SchemaName)[1]'',''nvarchar(128)''),
      @ObjectName=@EventData.value(''(/EVENT_INSTANCE/ObjectName)[1]'',''nvarchar(128)''),
      @TargetObjectName=@EventData.value(''(/EVENT_INSTANCE/TargetObjectName)[1]'',''nvarchar(128)''),
      @TargetObjectType=@EventData.value(''(/EVENT_INSTANCE/TargetObjectType)[1]'',''nvarchar(128)'');

   declare
      @msg nvarchar(1000)=N''There has been a DDL modification to the ARA.
EventType := [%s];
HostName := [%s];
LoginName := [%s];
DatabaseName := [%s];
ObjectType := [%s];
SchemaName := [%s];
ObjectName := [%s];
TargetObjectName := [%s];
TargetObjectType := [%s];''

   --raiserror(@msg,-1,1,@EventType,@HostName,@LoginName,@DatabaseName,@ObjectType,@SchemaName,@ObjectName,@TargetObjectName,@TargetObjectType) with log;

end;'

end;</value>
  </data>
  <data name="ARA_ConstraintDefaultDefinition" xml:space="preserve">
    <value>if col_length('[dbo].[{{{entity}}}]','{{{column name}}}') is not null begin; 
   alter table [dbo].[{{{entity}}}] add constraint [df : {{{entity}}} :: {{{column name}}}] default ({{{default value}}}) for [{{{column name}}}];
end;
if col_length('[dbo].[{{{entity}}}.Keystore]','{{{column name}}}') is not null begin; 
   alter table [dbo].[{{{entity}}}.Keystore] add constraint [df : {{{entity}}}.Keystore :: {{{column name}}}] default ({{{default value}}}) for [{{{column name}}}];
end;</value>
  </data>
  <data name="ARA_ConstraintDefaultDefinitionOnAdd" xml:space="preserve">
    <value>constraint [df : {{{entity}}} :: {{{attribute}}}] default ({{{default value}}})</value>
  </data>
  <data name="ARA_DropAlternateKeyDefinitionTypeII" xml:space="preserve">
    <value>if col_length('[dbo].[{{{entity}}}.Keystore]','{{{attribute}}}') is not null begin;
   alter table [dbo].[{{{entity}}}.Keystore] drop column {{{column name}}};
end;</value>
  </data>
  <data name="ARA_HashingAlgorithm" xml:space="preserve">
    <value>if object_id(N'[dbo].[ara_hash]',N'FS') is not null drop function [dbo].[ara_hash];

exec sys.sp_executesql
N'
create function [dbo].[ara_hash] 
 (
   @string nvarchar(max)
 ) 
returns varbinary(20) with execute as owner
as external name [Slalom.Framework.Methods].[EDW.Common.Methods].[StringHash];'

exec sys.sp_MS_marksystemobject 'ara_hash';

grant execute on [dbo].[ara_hash] to [ara_etl_manager];
--grant execute on [dbo].[ara_hash] to [ara_owner];</value>
  </data>
  <data name="ARA_EntityStatistics" xml:space="preserve">
    <value>if col_length(N'[dbo].[{{{entity}}}]',N'{{{attribute}}}') is not null and not exists(select N'?' from sys.stats where [name]='st : {{{entity}}} :: {{{attribute}}}') begin;
   create statistics [st : {{{entity}}} :: {{{attribute}}}] on [dbo].[{{{entity}}}]
    (
      [{{{attribute}}}]
    );
end;</value>
  </data>
  <data name="ARA_GetMetadataAbstract" xml:space="preserve">
    <value>select
   [ara_abstract_security_group],
   [ara_abstract_name],
   [ara_entity],
   [ara_abstract_security_role],
   isnull([ara_abstract_description],N'') [ara_abstract_description],
   isnull([ara_abstract_predicate],N'') [ara_abstract_predicate]
from
   [master].[dbo].[ara_abstract_definition];</value>
  </data>
  <data name="ARA_GetMetadataAbstractColumn" xml:space="preserve">
    <value>select
   [ara_abstract_security_group],
   [ara_abstract_name],
   [ara_attribute_name],
   [ara_entity],
   isnull([ara_abstract_alternate_name],N'') [ara_abstract_alternate_name]
from 
   [master].[dbo].[ara_abstract_column_definition];</value>
  </data>
  <data name="ARA_GetMetadataSecurity" xml:space="preserve">
    <value>select distinct [ara_abstract_security_group],[ara_abstract_security_role] from [master].[dbo].[ara_abstract_definition];</value>
  </data>
  <data name="ARA_AbstractDefinitionTypeI" xml:space="preserve">
    <value>exec sys.sp_executesql N'create view [{{{security group}}}].[{{{abstract name}}}]
 (
-- EDW Framework - Analytics &amp; Reporting Area (''ARA'') Definition
-- Slalom Consulting | Copyright © 2015 | www.slalom.com
-- Do NOT alter/add/extend this view
   [{{{entity}}}Key],
{{{return set}}}
   [ara_start_period],
   [ara_modify_period],
   [ara_active_state],
   [ara_dml_action]
 ) with schemabinding
as
select
   [{{{entity}}}Key],
{{{column set}}}
   [ara_start_period],
   [ara_modify_period],
   [ara_active_state],
   [ara_dml_action]
from
   [dbo].[{{{entity}}}]
where
   1=1{{{predicate}}};'</value>
  </data>
  <data name="ARA_AbstractDefinitionTypeII" xml:space="preserve">
    <value>--&gt; none yet</value>
  </data>
  <data name="ARA_ModelSecurityDefinition" xml:space="preserve">
    <value>if not exists(select N'?' from sys.schemas where [name]=N'{{{security group}}}') begin;
   exec sys.sp_executesql N'create schema [{{{security group}}}] authorization [dbo];'
end;

if not exists(select N'?' from sys.database_principals where [name]=N'{{{security role}}}' and [type]=N'R') begin;
   create role [{{{security role}}}] authorization [dbo];
end;

grant select on schema::[{{{security group}}}] to [{{{security role}}}];</value>
  </data>
  <data name="ARA_AbstractDropDefinition" xml:space="preserve">
    <value>declare @drop_dependencies nvarchar(max);

while 1!=2 begin;

   select top 1
      @drop_dependencies=N'drop view ['+object_schema_name(d.[object_id])+N'].['+object_name(d.[object_id])+N'];' 
   from
      sys.sql_dependencies d
      inner join
      sys.objects o on d.[object_id]=o.[object_id]
   where 
      object_name(d.[object_id])=N'{{{entity}}}' 
      and 
      d.[class]=1 
      and 
      d.[is_selected]=1 
      and 
      d.[referenced_minor_id]=0 
      and 
      parsename(object_name(d.[object_id]),2) is null
      and
      o.[type]=N'V';

    if @@rowcount = 0 break;

    exec sys.sp_executesql @drop_dependencies;  
end;</value>
  </data>
  <data name="ARA_ControlSecurityDefinition" xml:space="preserve">
    <value>grant select,insert,update,delete on [dbo].[{{{entity}}}.Control] to [ara_etl_manager];
exec sys.sp_MS_marksystemobject N'[{{{entity}}}.Control]';</value>
  </data>
  <data name="SYS_SlalomTextArtSQL" xml:space="preserve">
    <value>--   ______     __             _____                  ____  _          
--  / __/ /__ _/ /__  __ _    / ___/__  ___  _____ __/ / /_(_)__  ___ _
-- _\ \/ / _ `/ / _ \/  ' \  / /__/ _ \/ _ \(_-&lt; // / / __/ / _ \/ _ `/
--/___/_/\_,_/_/\___/_/_/_/  \___/\___/_//_/___|_,_/_/\__/_/_//_/\_, / 
--                                                              /___/</value>
  </data>
</root>